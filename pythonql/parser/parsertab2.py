
# parsertab2.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "exprleftORleftANDrightNOTleft<>EQUALSGT_EQLT_EQNOT_EQ_1NOT_EQ_2INISleft|left^left&leftLEFT_SHIFTleftRIGHT_SHIFTleft+-left*/%IDIVleft@rightUPLUSUMINUSUNOTDEF RETURN RAISE FROM IMPORT AS GLOBAL NONLOCAL ASSERT IF ELIF ELSE WHILE FOR LET IN TRY FINALLY WITH EXCEPT LAMBDA OR AND NOT IS NONE TRUE FALSE CLASS YIELD DEL PASS CONTINUE BREAK SELECT WHERE GROUP BY ORDER WINDOW PREVIOUS FOLLOWING START END WHEN AT ONLY TUMBLING SLIDING ASC DESC COUNT MATCH EXACT FILTER NEWLINE INDENT DEDENT STRING_LITERAL LONG_STRING_LITERAL FSTRING_LITERAL LONG_FSTRING_LITERAL NAME FLOAT_NUMBER DECIMAL_INTEGER OCT_INTEGER HEX_INTEGER BIN_INTEGER IMAG_NUMBER ELLIPSIS POWER LEFT_SHIFT RIGHT_SHIFT IDIV EQUALS GT_EQ LT_EQ NOT_EQ_1 NOT_EQ_2 ARROW ADD_ASSIGN SUB_ASSIGN MULT_ASSIGN AT_ASSIGN DIV_ASSIGN MOD_ASSIGN AND_ASSIGN OR_ASSIGN XOR_ASSIGN LEFT_SHIFT_ASSIGN RIGHT_SHIFT_ASSIGN POWER_ASSIGN IDIV_ASSIGN CHILD_AXIS DESCENDENT_AXISfile_input : stmt_or_newline_liststmt_or_newline_list : NEWLINE\n                            | stmt\n                            | stmt_or_newline_list NEWLINE\n                            | stmt_or_newline_list stmt decorator : '@' dotted_name args_opt NEWLINEdotted_name : NAME\n                   | dotted_name '.' NAMEargs_opt : '(' arg_list ')'\n                | decorator_list : decorator_list decorator\n                      | decoratordecorated : decorator_list funcdef\n                 | decorator_list classdeffuncdef : DEF NAME parameters signature_opt ':' suitesignature_opt : ARROW test \n                     | parameters : '(' typedargs_list_opt ')'typedargs_list_opt : typedargs_list\n                         | typedargs_list : normal_args_list \n                      | normal_args_list ',' star_args_list\n                      | normal_args_list ',' star_args_list ',' double_star_arg\n                      | normal_args_list ',' double_star_arg\n                      | star_args_list ',' double_star_arg\n                      | double_star_argnormal_args_list : normal_args_list ',' normal_arg\n                        | normal_argnormal_arg : tpdef\n                  | tpdef '=' teststar_args_list : star_tpdef\n                      | star_tpdef ',' normal_args_list\n                      | star_tpdef ',' double_star_arg\n                      | star_tpdef ',' normal_args_list ',' double_star_argdouble_star_arg : POWER tpdeftpdef : NAME\n             | NAME ':' teststar_tpdef : '*'\n                  | '*' tpdefstmt : simple_stmt\n            | compound_stmtsimple_stmt : small_stmt_list ';' NEWLINE\n                   | small_stmt_list NEWLINEsmall_stmt_list : small_stmt\n                       | small_stmt_list ';' small_stmtsmall_stmt : expr_stmt\n                  | del_stmt\n                  | pass_stmt\n                  | flow_stmt\n                  | import_stmt\n                  | global_stmt\n                  | non_local_stmt\n                  | assert_stmtexpr_stmt : testlist_star_expr augassign yield_expr\n                | testlist_star_expr augassign test_list_comma_opt\n                | testlist_star_expr annassign\n                | testlist_star_expr assign_listtestlist_star_expr : test comma_opt\n                          | star_expr comma_opt\n                          | testlist_star_expr ',' test comma_opt\n                          | testlist_star_expr ',' star_expr comma_optcomma_opt : ','\n                 | augassign : ADD_ASSIGN\n                 | SUB_ASSIGN\n                 | MULT_ASSIGN\n                 | AT_ASSIGN\n                 | AND_ASSIGN\n                 | OR_ASSIGN\n                 | XOR_ASSIGN\n                 | LEFT_SHIFT_ASSIGN\n                 | RIGHT_SHIFT_ASSIGN\n                 | POWER_ASSIGN\n                 | DIV_ASSIGN\n                 | MOD_ASSIGN\n                 | IDIV_ASSIGNannassign : ':' test annassign_optannassign_opt : '=' test\n                     | assign_list : '=' yield_expr\n                   | '=' testlist_star_expr\n                   | assign_list '=' yield_expr\n                   | assign_list '=' testlist_star_expr\n                   | del_stmt : DEL expr_listpass_stmt : PASSflow_stmt : break_stmt\n                 | continue_stmt\n                 | return_stmt\n                 | raise_stmt\n                 | yield_stmtbreak_stmt : BREAKcontinue_stmt : CONTINUEreturn_stmt : RETURN test_list_comma_opt\n                   | RETURNyield_stmt : yield_exprraise_stmt : RAISE\n                  | RAISE test\n                  | RAISE test FROM testimport_stmt : import_name\n                   | import_fromimport_name : IMPORT dotted_as_namesimport_from : FROM dots_list_opt dotted_name dots_list_opt IMPORT '*'\n                   | FROM dots_list_opt dotted_name dots_list_opt IMPORT '(' import_as_names comma_opt ')'\n                   | FROM dots_list_opt dotted_name dots_list_opt IMPORT import_as_names comma_optdots_list_opt : dots_list\n                     | dots_list : '.'\n                 | ELLIPSIS\n                 | dots_list '.'\n                 | dots_list ELLIPSISimport_as_name : NAME\n                      | NAME AS NAMEdotted_as_names : dotted_as_name\n                       | dotted_as_names ',' dotted_as_namedotted_as_name : dotted_name\n                      | dotted_name AS NAMEimport_as_names : import_as_name\n                       | import_as_names ',' import_as_nameglobal_stmt : GLOBAL name_listname_list : NAME\n                 | name_list ',' NAMEnon_local_stmt : NONLOCAL name_listassert_stmt : ASSERT test\n                   | ASSERT test ',' testcompound_stmt : if_stmt\n                     | while_stmt\n                     | for_stmt\n                     | try_stmt\n                     | with_stmt\n                     | funcdef\n                     | classdef\n                     | decoratedif_stmt : IF test ':' suite elif_list else_optelif_list : elif_list ELIF test ':' suite\n                 | else_opt : ELSE ':' suite\n                | while_stmt : WHILE test ':' suite else_optfor_stmt : FOR expr_list IN test_list_comma_opt ':' suite else_opttry_stmt : TRY ':' suite except_clauses_list else_opt finally_opt\n                | TRY ':' suite finallyexcept_clauses_list : except_clauses_list except_clause ':' suite\n                           | except_clause ':' suitefinally_opt : finally\n                   | finally : FINALLY ':' suitewith_stmt : WITH with_item_list ':' suitewith_item_list : with_item_list with_item\n                      | with_item : test\n                 | test AS exprexcept_clause : EXCEPT test AS NAME\n                     | EXCEPT test\n                     | EXCEPTsuite : simple_stmt\n             | NEWLINE INDENT stmt_list DEDENTstmt_list : stmt\n                 | stmt_list stmttest : try_catch_expr path_steppath_step : path_step CHILD_AXIS try_catch_expr\n                      | path_step DESCENDENT_AXIS try_catch_expr\n                      | try_catch_expr : old_test\n                      | TRY old_test EXCEPT old_testold_test : logical\n                | logical IF logical ELSE old_test\n                | lambdeftest_nocond : logical\n                   | lambdef_nocondlambdef : LAMBDA varargs_list ':' test\n               | LAMBDA ':' testlambdef_nocond : LAMBDA varargs_list ':' test_nocond\n                      | LAMBDA ':' test_nocondvarargs_list : vfpdef_list comma_opt\n                    | vfpdef_list ',' star_vfpdef vfpdef_rest\n                    | vfpdef_list ',' power_vfpdef\n                    | star_vfpdef vfpdef_rest\n                    | power_vfpdefvfpdef_list : NAME\n                   | NAME '=' test\n                   | vfpdef_list ',' NAME\n                   | vfpdef_list ',' NAME '=' teststar_vfpdef : '*'\n                   | '*' NAMEvfpdef_rest : comma_vfpdef_list comma_power_vfpdefcomma_vfpdef_list : ',' NAME\n                         | ',' NAME '=' test\n                         | comma_vfpdef_list ',' NAME\n                         | comma_vfpdef_list ',' NAME '=' test\n                         | comma_power_vfpdef : ',' POWER NAME\n                          | power_vfpdef : POWER NAMElogical : logical AND logical\n               | logical OR logical\n               | NOT logical\n               | is_not_expris_not_expr : is_not_expr IS NOT is_not_expr\n                   | comparisoncomparison : comparison comp_op comparison\n                  | not_in_exprcomp_op : '<'\n               | '>'\n               | EQUALS\n               | GT_EQ\n               | LT_EQ\n               | NOT_EQ_1\n               | NOT_EQ_2\n               | IN\n               | ISnot_in_expr : not_in_expr NOT IN not_in_expr\n                   | star_exprstar_expr : '*' expr\n                 | exprexpr : expr '|' expr\n            | expr '^' expr\n            | expr '&' expr\n            | expr LEFT_SHIFT expr\n            | expr RIGHT_SHIFT expr\n            | expr '+' expr\n            | expr '-' expr\n            | expr '*' expr\n            | expr '/' expr\n            | expr '%' expr\n            | expr IDIV expr\n            | expr '@' expr\n            | factorfactor : '+' expr %prec UPLUS\n                | '-' expr %prec UMINUS\n                | '~' expr %prec UNOT\n                | powerpower : atom trailer_list_opt\n             | atom trailer_list_opt POWER factortrailer_list_opt : trailer_list_opt trailer\n                        | fstring : LONG_FSTRING_LITERAL\n               | FSTRING_LITERALatom : fstring\n            | NAME\n            | number\n            | string_list\n            | ELLIPSIS\n            | NONE\n            | TRUE\n            | FALSE\n            | gen_query_expression\n            | list_query_expression\n            | set_query_expressionstring_list : string_list string\n                   | stringgen_query_expression : '(' ')'\n                           | '(' yield_expr ')'\n                           | '(' testseq_query ')'list_query_expression : '[' ']'\n                             | '[' testlist_query ']'set_query_expression : '{' '}'\n                            | '{' dictorsetmaker '}'query_expression : select_clause first_clause rest_clauses_list_optfirst_clause : for_clause\n                    | let_clause \n                    | window_clause\n                    | match_clauserest_clauses_list_opt : rest_clauses_list_opt query_clause\n                             | query_clause : for_clause\n                    | let_clause\n                    | window_clause\n                    | match_clause\n                    | group_by_clause\n                    | where_clause\n                    | order_by_clause\n                    | count_clausequery_map_expression : map_select_clause first_clause rest_clauses_list_optselect_clause : SELECT test\n                     | testmap_select_clause : SELECT test ':' test\n                         | test ':' testfor_clause : FOR for_clause_entry_listfor_clause_entry_list : for_clause_entry\n                             | for_clause_entry_list ',' for_clause_entryfor_clause_entry : expr_list IN logicallet_clause : LET let_clause_entry_listlet_clause_entry_list : let_clause_entry\n                             | let_clause_entry_list ',' let_clause_entrylet_clause_entry : expr_list '=' testwindow_clause : tumbling_window\n                     | sliding_windowtumbling_window : FOR TUMBLING WINDOW NAME IN test window_start_cond window_end_cond_optsliding_window : FOR SLIDING WINDOW NAME IN test window_start_cond window_end_condwindow_start_cond : START window_vars WHEN testwindow_end_cond_opt : window_end_cond\n                           | window_end_cond : ONLY END window_vars WHEN test\n                       | END window_vars WHEN testwindow_vars : current_item_opt positional_var_opt previous_var_opt following_var_optcurrent_item_opt : NAME \n                        | positional_var_opt : AT NAME\n                          | previous_var_opt : PREVIOUS NAME\n                        | following_var_opt : FOLLOWING NAME\n                         | match_clause : MATCH exact_or_filter_opt pattern_object IN testexact_or_filter_opt : EXACT\n                       | FILTER\n                       | pattern_object : '{' pattern_object_list '}' as_optas_opt : AS NAME\n              | pattern_object_list : pattern_object_element\n                           | pattern_object_list ',' pattern_object_elementpattern_object_element : STRING_LITERAL ':' STRING_LITERAL\n                              | STRING_LITERAL ':' AS NAME WHERE test\n                              | STRING_LITERAL ':' AS NAME\n                              | STRING_LITERAL ':' WHERE test\n                              | STRING_LITERAL ':' NAME\n                              | STRING_LITERAL ':' pattern_objectorder_by_clause : ORDER BY order_listorder_list : order_element\n                  | order_list ',' order_elementorder_element : test\n                     | test ASC\n                     | test DESCgroup_by_clause : GROUP BY group_by_var_listgroup_by_var_list : group_by_var\n                         | group_by_var_list ',' group_by_vargroup_by_var : old_test\n                    | old_test AS NAMEwhere_clause : WHERE test\n                    | IF testcount_clause : COUNT NAMEtestseq_query : test_as_list comma_opt\n                     | query_expressiontest_as_list : test_as\n                    | test_as_list ',' test_as test_as : test\n               | test AS NAMEtestlist_query : test_list_comma_opt\n                      | query_expressiontrailer : '(' ')'\n               | '(' arg_list ')'\n               | '[' subscript_list ']'\n               | '.' NAMEsubscript_list : subscript\n                      | subscript_list ',' subscriptsubscript : test\n                 | test_opt ':' test_opt sliceoptest_opt : test\n                | sliceop : ':' test\n               | ':'\n               | expr_list : star_expr \n                 | expr_list ',' star_exprtest_list : test\n                 | test_list ',' testtest_list_comma_opt : test_list comma_optdictorsetmaker : test_map_list_comma_opt\n                      | query_map_expression\n                      | test_list_comma_opt\n                      | query_expressiontest_map_list_comma_opt : test_map_listtest_map_list : test ':' test\n                     | test_map_list ',' test ':' testclassdef : CLASS NAME '(' arg_list ')' ':' suite\n                | CLASS NAME '(' ')' ':' suite\n                | CLASS NAME ':' suitearg_list : argument_list_opt_comma argument comma_opt\n                | argument_list_opt_comma '*' test ',' argument_list_opt\n                | argument_list_opt_comma '*' test ',' argument_list_opt ',' POWER test\n                | argument_list_opt_comma POWER testargument_list_opt_comma : argument_list_opt_comma argument ','\n                        | argument_list_opt : argument_list\n                    | argument_list : argument\n                     | argument_list ',' argumentargument : test\n                | test comp_for\n                | test '=' testcomp_iter : comp_for\n                 | comp_ifcomp_for : FOR expr_list IN logical comp_iter_optcomp_if : IF test_nocond comp_iter_optcomp_iter_opt : comp_iter\n                     | yield_expr : YIELD yield_arg\n                  | YIELDyield_arg : FROM test\n                 | test_list_comma_optstring : STRING_LITERAL\n              | LONG_STRING_LITERALnumber : integer\n              | FLOAT_NUMBER\n              | IMAG_NUMBERinteger : DECIMAL_INTEGER\n               | OCT_INTEGER\n               | HEX_INTEGER\n               | BIN_INTEGER"
    
_lr_action_items = {'+':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,60,63,66,72,73,74,80,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,153,154,156,157,158,160,162,163,165,170,188,189,190,194,195,202,206,211,212,214,216,217,218,219,230,231,234,237,238,239,240,246,257,260,262,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[2,39,2,2,-228,2,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,2,2,2,-398,-399,-400,-401,-393,-394,2,2,2,2,2,2,2,2,2,2,2,2,-229,-230,-231,-233,-250,-252,2,2,2,2,2,39,-255,-257,2,39,39,39,39,39,-221,-222,-223,-224,-225,-226,-227,2,-235,-375,2,-253,-254,2,2,2,2,2,2,2,2,2,-203,-204,-205,-206,-207,-208,-209,-210,-211,39,-256,2,-258,2,2,-234,-342,2,-345,2,2,2,2,2,2,2,2,-343,2,2,-344,2,2,2,2,2,2,2,2,2,2,2,-374,39,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,]),'-':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,60,63,66,72,73,74,80,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,153,154,156,157,158,160,162,163,165,170,188,189,190,194,195,202,206,211,212,214,216,217,218,219,230,231,234,237,238,239,240,246,257,260,262,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[3,40,3,3,-228,3,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,3,3,3,-398,-399,-400,-401,-393,-394,3,3,3,3,3,3,3,3,3,3,3,3,-229,-230,-231,-233,-250,-252,3,3,3,3,3,40,-255,-257,3,40,40,40,40,40,-221,-222,-223,-224,-225,-226,-227,3,-235,-375,3,-253,-254,3,3,3,3,3,3,3,3,3,-203,-204,-205,-206,-207,-208,-209,-210,-211,40,-256,3,-258,3,3,-234,-342,3,-345,3,3,3,3,3,3,3,3,-343,3,3,-344,3,3,3,3,3,3,3,3,3,3,3,-374,40,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'~':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,104,105,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,260,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-375,5,5,5,5,5,5,5,5,5,5,-203,-204,-205,-206,-207,-208,-209,-210,-211,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,-374,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'NAME':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,68,72,89,102,104,105,106,110,114,120,121,125,129,130,131,135,140,141,142,143,144,145,146,147,148,149,150,151,156,158,160,165,188,189,190,194,195,198,201,202,206,211,214,216,218,219,230,231,233,234,235,236,237,238,239,240,246,253,257,260,264,265,270,273,282,288,290,291,293,296,304,305,309,311,317,319,320,321,327,330,332,336,342,347,353,357,362,367,368,370,372,376,378,381,383,385,388,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,139,9,9,9,-375,9,170,9,9,9,9,187,9,9,9,9,203,204,9,-203,-204,-205,-206,-207,-208,-209,-210,-211,9,9,9,9,9,9,9,9,9,251,254,9,9,9,9,9,9,9,9,9,274,9,276,277,9,9,9,9,9,289,9,-374,9,9,9,9,9,9,312,9,9,9,9,9,331,9,9,9,339,9,344,345,9,9,360,9,9,360,9,139,360,9,382,9,9,389,9,9,392,]),'ELLIPSIS':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,104,105,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,260,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-375,12,12,12,12,12,12,12,12,12,12,-203,-204,-205,-206,-207,-208,-209,-210,-211,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-374,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'NONE':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,104,105,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,260,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-375,13,13,13,13,13,13,13,13,13,13,-203,-204,-205,-206,-207,-208,-209,-210,-211,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-374,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'TRUE':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,104,105,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,260,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-375,14,14,14,14,14,14,14,14,14,14,-203,-204,-205,-206,-207,-208,-209,-210,-211,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-374,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'FALSE':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,104,105,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,260,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-375,15,15,15,15,15,15,15,15,15,15,-203,-204,-205,-206,-207,-208,-209,-210,-211,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-374,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'LONG_FSTRING_LITERAL':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,104,105,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,260,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-375,19,19,19,19,19,19,19,19,19,19,-203,-204,-205,-206,-207,-208,-209,-210,-211,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-374,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'FSTRING_LITERAL':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,104,105,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,260,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-375,20,20,20,20,20,20,20,20,20,20,-203,-204,-205,-206,-207,-208,-209,-210,-211,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-374,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'FLOAT_NUMBER':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,104,105,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,260,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-375,22,22,22,22,22,22,22,22,22,22,-203,-204,-205,-206,-207,-208,-209,-210,-211,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-374,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'IMAG_NUMBER':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,104,105,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,260,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-375,23,23,23,23,23,23,23,23,23,23,-203,-204,-205,-206,-207,-208,-209,-210,-211,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-374,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'(':([0,2,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,50,51,54,60,63,66,72,74,80,89,102,103,104,105,107,108,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,154,156,157,158,160,163,165,170,188,189,190,194,195,202,206,211,212,214,216,217,218,219,230,231,234,237,238,239,240,246,257,260,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[25,25,25,25,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,25,25,25,-398,-399,-400,-401,-393,-394,25,25,25,25,25,25,25,25,25,25,25,25,104,-250,-252,25,25,25,25,25,-255,-257,25,25,-235,-375,25,-253,-254,25,25,25,25,25,25,25,25,25,-203,-204,-205,-206,-207,-208,-209,-210,-211,-256,25,-258,25,25,-342,25,-345,25,25,25,25,25,25,25,25,-343,25,25,-344,25,25,25,25,25,25,25,25,25,25,25,-374,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'[':([0,2,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,49,50,51,54,60,63,66,72,74,80,89,102,103,104,105,107,108,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,154,156,157,158,160,163,165,170,188,189,190,194,195,202,206,211,212,214,216,217,218,219,230,231,234,237,238,239,240,246,257,260,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[26,26,26,26,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,26,26,26,-398,-399,-400,-401,-393,-394,26,26,26,26,26,26,26,26,26,26,26,26,105,-250,-252,26,26,26,26,26,-255,-257,26,26,-235,-375,26,-253,-254,26,26,26,26,26,26,26,26,26,-203,-204,-205,-206,-207,-208,-209,-210,-211,-256,26,-258,26,26,-342,26,-345,26,26,26,26,26,26,26,26,-343,26,26,-344,26,26,26,26,26,26,26,26,26,26,26,-374,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'{':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,104,105,110,114,120,121,124,129,130,131,135,142,143,144,145,146,147,148,149,150,151,156,158,160,165,184,185,186,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,260,264,265,270,273,282,288,291,293,296,304,305,309,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-375,27,27,27,27,27,-308,27,27,27,27,27,-203,-204,-205,-206,-207,-208,-209,-210,-211,27,27,27,27,242,-306,-307,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-374,27,27,27,27,27,27,27,27,27,27,27,242,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'DECIMAL_INTEGER':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,104,105,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,260,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-375,28,28,28,28,28,28,28,28,28,28,-203,-204,-205,-206,-207,-208,-209,-210,-211,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-374,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'OCT_INTEGER':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,104,105,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,260,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-375,29,29,29,29,29,29,29,29,29,29,-203,-204,-205,-206,-207,-208,-209,-210,-211,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-374,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'HEX_INTEGER':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,104,105,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,260,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-375,30,30,30,30,30,30,30,30,30,30,-203,-204,-205,-206,-207,-208,-209,-210,-211,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-374,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'BIN_INTEGER':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,104,105,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,260,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-375,31,31,31,31,31,31,31,31,31,31,-203,-204,-205,-206,-207,-208,-209,-210,-211,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-374,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'STRING_LITERAL':([0,2,3,5,11,24,25,26,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,50,54,60,63,66,72,89,102,104,105,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,242,246,257,260,264,265,270,273,282,288,291,293,296,304,305,308,309,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[32,32,32,32,32,-251,32,32,32,-393,-394,32,32,32,32,32,32,32,32,32,32,32,32,-250,32,32,32,32,32,32,32,-375,32,32,32,32,32,32,32,32,32,32,-203,-204,-205,-206,-207,-208,-209,-210,-211,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,285,32,32,-374,32,32,32,32,32,32,32,32,32,32,32,285,329,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'LONG_STRING_LITERAL':([0,2,3,5,11,24,25,26,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,50,54,60,63,66,72,89,102,104,105,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,260,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[33,33,33,33,33,-251,33,33,33,-393,-394,33,33,33,33,33,33,33,33,33,33,33,33,-250,33,33,33,33,33,33,33,-375,33,33,33,33,33,33,33,33,33,33,-203,-204,-205,-206,-207,-208,-209,-210,-211,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-374,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'$end':([1,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,154,157,162,163,170,212,217,],[0,-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-256,-258,-234,-342,-345,-343,-344,]),'|':([1,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,153,154,157,162,163,170,212,217,262,],[34,-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,34,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,34,-256,-258,-234,-342,-345,-343,-344,34,]),'^':([1,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,153,154,157,162,163,170,212,217,262,],[35,-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,35,-255,-257,35,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,35,-256,-258,-234,-342,-345,-343,-344,35,]),'&':([1,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,153,154,157,162,163,170,212,217,262,],[36,-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,36,-255,-257,36,36,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,36,-256,-258,-234,-342,-345,-343,-344,36,]),'LEFT_SHIFT':([1,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,153,154,157,162,163,170,212,217,262,],[37,-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,37,-255,-257,37,37,37,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,37,-256,-258,-234,-342,-345,-343,-344,37,]),'RIGHT_SHIFT':([1,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,153,154,157,162,163,170,212,217,262,],[38,-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,38,-255,-257,38,38,38,38,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,38,-256,-258,-234,-342,-345,-343,-344,38,]),'*':([1,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,46,47,48,49,50,51,54,60,63,66,68,73,74,80,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,107,108,110,114,120,121,129,130,131,135,142,143,144,145,146,147,148,149,150,151,153,154,156,157,158,160,162,163,165,170,188,189,190,194,195,198,202,206,211,212,214,216,217,218,219,230,231,234,237,238,239,240,246,257,260,262,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,367,370,376,378,383,385,],[41,-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,72,72,72,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,72,72,72,72,140,41,-255,-257,72,41,41,41,41,41,41,41,-223,-224,-225,-226,-227,-235,-375,72,-253,-254,72,72,72,72,72,72,72,72,72,-203,-204,-205,-206,-207,-208,-209,-210,-211,41,-256,72,-258,72,72,-234,-342,214,-345,72,72,72,72,72,140,72,72,72,-343,72,72,-344,72,72,72,72,72,72,72,72,72,72,72,-374,41,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,140,72,72,72,72,72,]),'/':([1,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,153,154,157,162,163,170,212,217,262,],[42,-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,42,-255,-257,42,42,42,42,42,42,42,-223,-224,-225,-226,-227,-235,-253,-254,42,-256,-258,-234,-342,-345,-343,-344,42,]),'%':([1,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,153,154,157,162,163,170,212,217,262,],[43,-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,43,-255,-257,43,43,43,43,43,43,43,-223,-224,-225,-226,-227,-235,-253,-254,43,-256,-258,-234,-342,-345,-343,-344,43,]),'IDIV':([1,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,153,154,157,162,163,170,212,217,262,],[44,-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,44,-255,-257,44,44,44,44,44,44,44,-223,-224,-225,-226,-227,-235,-253,-254,44,-256,-258,-234,-342,-345,-343,-344,44,]),'@':([1,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,153,154,157,162,163,170,212,217,262,],[45,-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,45,-255,-257,45,45,45,45,45,45,45,45,45,45,45,-227,-235,-253,-254,45,-256,-258,-234,-342,-345,-343,-344,45,]),'NOT':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,46,47,48,49,50,51,54,60,63,66,70,71,73,74,80,89,90,91,92,93,94,95,96,97,98,99,100,101,103,104,105,107,108,110,114,129,130,131,133,135,153,154,156,157,158,160,162,163,165,170,188,189,190,195,202,211,212,214,216,217,218,219,230,231,237,240,246,256,257,260,262,264,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,66,66,66,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,66,66,66,66,152,-213,-215,-255,-257,66,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-375,66,-253,-254,66,66,66,66,66,194,66,-214,-256,66,-258,66,66,-234,-342,66,-345,66,66,66,66,66,66,-343,66,66,-344,66,66,66,66,66,66,66,-212,66,-374,-214,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'<':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,153,154,157,162,163,170,205,212,217,256,262,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,143,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-214,-256,-258,-234,-342,-345,143,-343,-344,-212,-214,]),'>':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,153,154,157,162,163,170,205,212,217,256,262,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,144,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-214,-256,-258,-234,-342,-345,144,-343,-344,-212,-214,]),'EQUALS':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,153,154,157,162,163,170,205,212,217,256,262,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,145,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-214,-256,-258,-234,-342,-345,145,-343,-344,-212,-214,]),'GT_EQ':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,153,154,157,162,163,170,205,212,217,256,262,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,146,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-214,-256,-258,-234,-342,-345,146,-343,-344,-212,-214,]),'LT_EQ':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,153,154,157,162,163,170,205,212,217,256,262,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,147,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-214,-256,-258,-234,-342,-345,147,-343,-344,-212,-214,]),'NOT_EQ_1':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,153,154,157,162,163,170,205,212,217,256,262,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,148,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-214,-256,-258,-234,-342,-345,148,-343,-344,-212,-214,]),'NOT_EQ_2':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,153,154,157,162,163,170,205,212,217,256,262,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,149,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-214,-256,-258,-234,-342,-345,149,-343,-344,-212,-214,]),'IN':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,152,153,154,157,162,163,170,179,180,205,212,217,241,256,262,276,277,279,295,307,326,344,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,150,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,206,-214,-256,-258,-234,-342,-345,237,-355,150,-343,-344,282,-212,-214,304,305,-356,317,-311,-309,-310,]),'IS':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,153,154,157,162,163,170,205,212,217,247,256,262,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,133,151,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-214,-256,-258,-234,-342,-345,151,-343,-344,133,-212,-214,]),'IF':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,61,62,64,65,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,115,116,117,118,119,122,123,127,132,153,154,157,159,162,163,170,174,175,178,181,182,192,193,196,205,209,212,217,220,221,222,223,224,225,226,227,228,243,244,245,247,248,256,262,271,272,274,275,278,280,281,286,298,299,300,301,302,303,306,322,323,337,338,339,340,341,354,355,361,364,365,366,379,384,386,390,391,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-163,-164,129,-168,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-265,-260,-261,-262,-263,-287,-288,-160,-197,-214,-256,-258,-265,-234,-342,-345,231,-279,-280,-283,-284,-195,-196,-172,-201,231,-343,-344,-264,-266,-267,-268,-269,-270,-271,-272,-273,-161,-162,-165,-199,-171,-212,-214,-331,-332,-333,-281,-282,-285,-286,-167,-326,-327,-329,-320,-321,-323,-305,-324,-325,353,-328,-330,-322,-293,-289,-292,-290,353,-169,-170,-291,-174,-295,-173,-294,]),'AND':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,64,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,132,153,154,157,162,163,170,191,192,193,205,212,217,247,256,262,278,337,365,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,130,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-197,-214,-256,-258,-234,-342,-345,130,-195,130,-201,-343,-344,-199,-212,-214,130,130,130,]),'OR':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,64,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,132,153,154,157,162,163,170,191,192,193,205,212,217,247,256,262,278,337,365,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,131,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-197,-214,-256,-258,-234,-342,-345,131,-195,-196,-201,-343,-344,-199,-212,-214,131,131,131,]),'CHILD_AXIS':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,61,62,64,65,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,127,132,153,154,157,162,163,170,192,193,196,205,212,217,243,244,245,247,248,256,262,286,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,188,-197,-214,-256,-258,-234,-342,-345,-195,-196,-172,-201,-343,-344,-161,-162,-165,-199,-171,-212,-214,-167,]),'DESCENDENT_AXIS':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,61,62,64,65,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,127,132,153,154,157,162,163,170,192,193,196,205,212,217,243,244,245,247,248,256,262,286,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,189,-197,-214,-256,-258,-234,-342,-345,-195,-196,-172,-201,-343,-344,-161,-162,-165,-199,-171,-212,-214,-167,]),'AS':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,59,61,62,64,65,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,127,132,153,154,157,162,163,170,173,192,193,196,205,212,217,243,244,245,247,248,256,286,300,307,309,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,125,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-160,-197,-214,-256,-258,-234,-342,-345,125,-195,-196,-172,-201,-343,-344,-161,-162,-165,-199,-171,-212,-167,320,327,330,]),',':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,55,57,59,61,62,64,65,67,69,70,71,73,74,78,79,80,86,88,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,111,127,132,136,137,139,140,153,154,157,162,163,166,167,168,170,172,173,175,178,179,180,181,182,183,187,192,193,196,200,203,205,207,210,212,213,215,217,219,243,244,245,247,248,249,251,254,255,256,261,262,263,267,268,269,275,278,279,280,281,283,284,286,289,292,293,294,295,296,297,298,299,300,301,302,303,307,310,313,314,315,316,318,322,323,326,328,329,331,333,334,337,338,339,340,344,345,346,348,349,350,351,352,364,365,366,373,374,384,390,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,114,-336,-338,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,156,-357,-257,158,-357,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-357,-160,-197,198,201,-180,-184,-214,-256,-258,-234,-342,218,-346,-348,-345,-337,-338,234,-280,238,-355,239,-284,238,-339,-195,-196,-172,253,-185,-201,-358,-365,-343,260,-380,-344,-351,-161,-162,-165,-199,-171,201,-182,-187,-181,-212,293,-214,-381,-347,-354,-350,-281,-282,-356,-285,-286,308,-312,-167,-189,-366,-377,-382,238,-353,-349,319,-327,-329,321,-321,-323,-311,-183,-188,335,336,-378,-352,-324,-325,-309,-313,-314,-318,-319,-190,-388,-328,-330,-322,-310,-316,-317,-379,-385,-387,-383,-384,-388,-169,-170,-315,-386,-174,-173,]),')':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,28,29,30,31,32,33,46,47,48,49,50,51,52,53,54,55,56,57,59,61,62,64,65,67,69,70,71,73,74,78,80,90,91,92,93,94,95,96,97,98,99,100,101,103,104,107,108,109,111,112,113,114,115,116,117,118,119,122,123,127,132,153,154,155,156,157,162,163,164,170,171,172,173,174,175,178,181,182,187,192,193,196,205,207,212,213,215,217,220,221,222,223,224,225,226,227,228,243,244,245,247,248,256,259,260,262,263,266,271,272,274,275,278,280,281,286,293,294,298,299,300,301,302,303,306,314,315,316,322,323,337,338,339,340,341,348,349,350,351,352,354,355,361,363,364,365,366,374,379,384,386,390,391,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,51,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,107,108,-390,-63,-335,-336,-338,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-63,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,163,-253,-254,-389,-357,-392,-334,-62,-265,-260,-261,-262,-263,-287,-288,-160,-197,-214,-256,-359,-62,-258,-234,-342,212,-345,-391,-337,-338,-259,-279,-280,-283,-284,-339,-195,-196,-172,-201,-358,-343,-63,-380,-344,-264,-266,-267,-268,-269,-270,-271,-272,-273,-161,-162,-165,-199,-171,-212,-370,-62,-214,-381,-373,-331,-332,-333,-281,-282,-285,-286,-167,-377,-382,-326,-327,-329,-320,-321,-323,-305,-371,-376,-378,-324,-325,-388,-328,-330,-322,-293,-379,-385,-387,-383,-384,-289,-292,-290,-372,-388,-169,-170,-386,-291,-174,-295,-173,-294,]),'FOR':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,58,59,61,62,64,65,67,69,70,71,73,74,79,80,87,88,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,115,116,117,118,119,122,123,126,127,132,153,154,157,159,161,162,163,170,174,175,178,181,182,192,193,196,205,209,210,212,215,217,220,221,222,223,224,225,226,227,228,243,244,245,247,248,256,258,262,271,272,274,275,278,280,281,286,298,299,300,301,302,303,306,322,323,337,338,339,340,341,354,355,361,364,365,366,379,384,386,390,391,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,120,-276,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-276,-257,120,-276,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-265,-260,-261,-262,-263,-287,-288,-275,-160,-197,-214,-256,-258,-265,-275,-234,-342,-345,120,-279,-280,-283,-284,-195,-196,-172,-201,120,-278,-343,265,-344,-264,-266,-267,-268,-269,-270,-271,-272,-273,-161,-162,-165,-199,-171,-212,-277,-214,-331,-332,-333,-281,-282,-285,-286,-167,-326,-327,-329,-320,-321,-323,-305,-324,-325,265,-328,-330,-322,-293,-289,-292,-290,265,-169,-170,-291,-174,-295,-173,-294,]),'LET':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,58,59,61,62,64,65,67,69,70,71,73,74,79,80,87,88,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,115,116,117,118,119,122,123,126,127,132,153,154,157,159,161,162,163,170,174,175,178,181,182,192,193,196,205,209,210,212,217,220,221,222,223,224,225,226,227,228,243,244,245,247,248,256,258,271,272,274,275,278,280,281,286,298,299,300,301,302,303,306,322,323,338,339,340,341,354,355,361,379,386,391,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,121,-276,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-276,-257,121,-276,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-265,-260,-261,-262,-263,-287,-288,-275,-160,-197,-214,-256,-258,-265,-275,-234,-342,-345,121,-279,-280,-283,-284,-195,-196,-172,-201,121,-278,-343,-344,-264,-266,-267,-268,-269,-270,-271,-272,-273,-161,-162,-165,-199,-171,-212,-277,-331,-332,-333,-281,-282,-285,-286,-167,-326,-327,-329,-320,-321,-323,-305,-324,-325,-328,-330,-322,-293,-289,-292,-290,-291,-295,-294,]),'MATCH':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,58,59,61,62,64,65,67,69,70,71,73,74,79,80,87,88,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,115,116,117,118,119,122,123,126,127,132,153,154,157,159,161,162,163,170,174,175,178,181,182,192,193,196,205,209,210,212,217,220,221,222,223,224,225,226,227,228,243,244,245,247,248,256,258,271,272,274,275,278,280,281,286,298,299,300,301,302,303,306,322,323,338,339,340,341,354,355,361,379,386,391,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,124,-276,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-276,-257,124,-276,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-265,-260,-261,-262,-263,-287,-288,-275,-160,-197,-214,-256,-258,-265,-275,-234,-342,-345,124,-279,-280,-283,-284,-195,-196,-172,-201,124,-278,-343,-344,-264,-266,-267,-268,-269,-270,-271,-272,-273,-161,-162,-165,-199,-171,-212,-277,-331,-332,-333,-281,-282,-285,-286,-167,-326,-327,-329,-320,-321,-323,-305,-324,-325,-328,-330,-322,-293,-289,-292,-290,-291,-295,-294,]),']':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,28,29,30,31,32,33,46,47,48,49,50,51,61,62,64,65,67,69,70,71,73,74,75,76,77,78,79,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,115,116,117,118,119,122,123,127,132,153,154,155,156,157,162,163,166,167,168,170,174,175,178,181,182,192,193,196,205,207,212,217,219,220,221,222,223,224,225,226,227,228,243,244,245,247,248,256,267,268,269,271,272,274,275,278,280,281,286,296,297,298,299,300,301,302,303,306,318,322,323,338,339,340,341,354,355,361,379,386,391,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,74,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,154,-340,-341,-63,-357,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-265,-260,-261,-262,-263,-287,-288,-160,-197,-214,-256,-359,-62,-258,-234,-342,217,-346,-348,-345,-259,-279,-280,-283,-284,-195,-196,-172,-201,-358,-343,-344,-351,-264,-266,-267,-268,-269,-270,-271,-272,-273,-161,-162,-165,-199,-171,-212,-347,-354,-350,-331,-332,-333,-281,-282,-285,-286,-167,-353,-349,-326,-327,-329,-320,-321,-323,-305,-352,-324,-325,-328,-330,-322,-293,-289,-292,-290,-291,-295,-294,]),':':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,61,62,64,65,67,68,69,70,71,73,74,80,88,90,91,92,93,94,95,96,97,98,99,100,101,103,105,107,108,127,132,134,136,137,138,139,140,153,154,157,161,162,163,168,169,170,192,193,196,197,198,199,200,203,204,205,208,212,217,218,219,243,244,245,247,248,249,250,251,252,254,255,256,268,269,285,286,287,289,310,312,313,334,367,375,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-163,-164,-166,-168,-198,135,-200,-202,-213,-215,-255,-257,160,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-351,-253,-254,-160,-197,195,-63,-191,-179,-180,-184,-214,-256,-258,211,-234,-342,-350,219,-345,-195,-196,-172,-175,-62,-178,-193,-185,-194,-201,257,-343,-344,-351,-351,-161,-162,-165,-199,-171,-191,-177,-182,-186,-187,-181,-212,296,-350,309,-167,-176,-189,-183,-192,-188,-190,376,383,]),'}':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,27,28,29,30,31,32,33,46,47,48,49,50,51,61,62,64,65,67,69,70,71,73,74,78,80,81,82,83,84,85,86,88,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,115,116,117,118,119,122,123,127,132,153,154,155,156,157,159,162,163,170,174,175,178,181,182,192,193,196,205,207,209,210,212,217,220,221,222,223,224,225,226,227,228,243,244,245,247,248,256,271,272,274,275,278,280,281,283,284,286,292,298,299,300,301,302,303,306,307,322,323,326,328,329,331,333,338,339,340,341,344,345,346,354,355,361,373,379,386,391,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,80,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-63,-257,157,-360,-361,-362,-363,-364,-357,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-265,-260,-261,-262,-263,-287,-288,-160,-197,-214,-256,-359,-62,-258,-265,-234,-342,-345,-259,-279,-280,-283,-284,-195,-196,-172,-201,-358,-274,-365,-343,-344,-264,-266,-267,-268,-269,-270,-271,-272,-273,-161,-162,-165,-199,-171,-212,-331,-332,-333,-281,-282,-285,-286,307,-312,-167,-366,-326,-327,-329,-320,-321,-323,-305,-311,-324,-325,-309,-313,-314,-318,-319,-328,-330,-322,-293,-310,-316,-317,-289,-292,-290,-315,-291,-295,-294,]),'EXCEPT':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,61,62,64,65,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,127,128,132,153,154,157,162,163,170,192,193,196,205,212,217,243,244,245,247,248,256,286,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-160,190,-197,-214,-256,-258,-234,-342,-345,-195,-196,-172,-201,-343,-344,-161,-162,-165,-199,-171,-212,-167,]),'ELSE':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,132,153,154,157,162,163,170,191,192,193,205,212,217,247,256,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-197,-214,-256,-258,-234,-342,-345,246,-195,-196,-201,-343,-344,-199,-212,]),'=':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,61,62,64,65,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,127,132,139,153,154,157,162,163,170,180,183,192,193,196,205,212,215,217,243,244,245,247,248,251,254,256,262,279,286,289,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-160,-197,202,-214,-256,-258,-234,-342,-345,-355,240,-195,-196,-172,-201,-343,264,-344,-161,-162,-165,-199,-171,288,291,-212,-214,-356,-167,311,]),'GROUP':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,61,62,64,65,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,115,116,117,118,119,122,123,127,132,153,154,157,159,162,163,170,174,175,178,181,182,192,193,196,205,209,212,217,220,221,222,223,224,225,226,227,228,243,244,245,247,248,256,271,272,274,275,278,280,281,286,298,299,300,301,302,303,306,322,323,338,339,340,341,354,355,361,379,386,391,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-265,-260,-261,-262,-263,-287,-288,-160,-197,-214,-256,-258,-265,-234,-342,-345,229,-279,-280,-283,-284,-195,-196,-172,-201,229,-343,-344,-264,-266,-267,-268,-269,-270,-271,-272,-273,-161,-162,-165,-199,-171,-212,-331,-332,-333,-281,-282,-285,-286,-167,-326,-327,-329,-320,-321,-323,-305,-324,-325,-328,-330,-322,-293,-289,-292,-290,-291,-295,-294,]),'WHERE':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,61,62,64,65,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,115,116,117,118,119,122,123,127,132,153,154,157,159,162,163,170,174,175,178,181,182,192,193,196,205,209,212,217,220,221,222,223,224,225,226,227,228,243,244,245,247,248,256,271,272,274,275,278,280,281,286,298,299,300,301,302,303,306,309,322,323,338,339,340,341,345,354,355,361,379,386,391,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-265,-260,-261,-262,-263,-287,-288,-160,-197,-214,-256,-258,-265,-234,-342,-345,230,-279,-280,-283,-284,-195,-196,-172,-201,230,-343,-344,-264,-266,-267,-268,-269,-270,-271,-272,-273,-161,-162,-165,-199,-171,-212,-331,-332,-333,-281,-282,-285,-286,-167,-326,-327,-329,-320,-321,-323,-305,332,-324,-325,-328,-330,-322,-293,362,-289,-292,-290,-291,-295,-294,]),'ORDER':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,61,62,64,65,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,115,116,117,118,119,122,123,127,132,153,154,157,159,162,163,170,174,175,178,181,182,192,193,196,205,209,212,217,220,221,222,223,224,225,226,227,228,243,244,245,247,248,256,271,272,274,275,278,280,281,286,298,299,300,301,302,303,306,322,323,338,339,340,341,354,355,361,379,386,391,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-265,-260,-261,-262,-263,-287,-288,-160,-197,-214,-256,-258,-265,-234,-342,-345,232,-279,-280,-283,-284,-195,-196,-172,-201,232,-343,-344,-264,-266,-267,-268,-269,-270,-271,-272,-273,-161,-162,-165,-199,-171,-212,-331,-332,-333,-281,-282,-285,-286,-167,-326,-327,-329,-320,-321,-323,-305,-324,-325,-328,-330,-322,-293,-289,-292,-290,-291,-295,-294,]),'COUNT':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,61,62,64,65,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,115,116,117,118,119,122,123,127,132,153,154,157,159,162,163,170,174,175,178,181,182,192,193,196,205,209,212,217,220,221,222,223,224,225,226,227,228,243,244,245,247,248,256,271,272,274,275,278,280,281,286,298,299,300,301,302,303,306,322,323,338,339,340,341,354,355,361,379,386,391,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-265,-260,-261,-262,-263,-287,-288,-160,-197,-214,-256,-258,-265,-234,-342,-345,233,-279,-280,-283,-284,-195,-196,-172,-201,233,-343,-344,-264,-266,-267,-268,-269,-270,-271,-272,-273,-161,-162,-165,-199,-171,-212,-331,-332,-333,-281,-282,-285,-286,-167,-326,-327,-329,-320,-321,-323,-305,-324,-325,-328,-330,-322,-293,-289,-292,-290,-291,-295,-294,]),'ASC':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,61,62,64,65,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,127,132,153,154,157,162,163,170,192,193,196,205,212,217,243,244,245,247,248,256,286,303,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-160,-197,-214,-256,-258,-234,-342,-345,-195,-196,-172,-201,-343,-344,-161,-162,-165,-199,-171,-212,-167,322,]),'DESC':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,61,62,64,65,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,127,132,153,154,157,162,163,170,192,193,196,205,212,217,243,244,245,247,248,256,286,303,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-160,-197,-214,-256,-258,-234,-342,-345,-195,-196,-172,-201,-343,-344,-161,-162,-165,-199,-171,-212,-167,323,]),'START':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,61,62,64,65,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,127,132,153,154,157,162,163,170,192,193,196,205,212,217,243,244,245,247,248,256,286,324,325,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-160,-197,-214,-256,-258,-234,-342,-345,-195,-196,-172,-201,-343,-344,-161,-162,-165,-199,-171,-212,-167,342,342,]),'ONLY':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,61,62,64,65,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,127,132,153,154,157,162,163,170,192,193,196,205,212,217,243,244,245,247,248,256,286,341,343,379,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-160,-197,-214,-256,-258,-234,-342,-345,-195,-196,-172,-201,-343,-344,-161,-162,-165,-199,-171,-212,-167,356,356,-291,]),'END':([4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,46,47,48,49,50,51,61,62,64,65,67,69,70,71,73,74,80,90,91,92,93,94,95,96,97,98,99,100,101,103,107,108,127,132,153,154,157,162,163,170,192,193,196,205,212,217,243,244,245,247,248,256,286,341,343,356,379,],[-228,-232,-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,-229,-230,-231,-233,-250,-252,-163,-164,-166,-168,-198,-200,-202,-213,-215,-255,-257,-216,-217,-218,-219,-220,-221,-222,-223,-224,-225,-226,-227,-235,-253,-254,-160,-197,-214,-256,-258,-234,-342,-345,-195,-196,-172,-201,-343,-344,-161,-162,-165,-199,-171,-212,-167,357,357,368,-291,]),'POWER':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,49,50,51,68,74,80,103,104,107,108,154,157,163,165,170,198,212,217,253,260,335,367,],[-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,102,-250,-252,141,-255,-257,-235,-375,-253,-254,-256,-258,-342,216,-345,141,-343,-344,290,-374,347,141,]),'.':([7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,28,29,30,31,32,33,49,50,51,74,80,103,107,108,154,157,163,170,212,217,],[-236,-239,-240,-241,-242,-243,-244,-245,-246,-247,-248,-249,-237,-238,-395,-396,-397,-251,-398,-399,-400,-401,-393,-394,106,-250,-252,-255,-257,-235,-253,-254,-256,-258,-342,-345,-343,-344,]),'YIELD':([25,],[54,]),'SELECT':([25,26,27,],[60,60,89,]),'TRY':([25,26,27,54,60,89,104,105,110,114,135,156,158,160,165,188,189,195,202,211,214,216,218,219,230,231,240,257,260,264,273,282,288,291,293,296,304,305,311,321,332,336,347,362,370,378,385,],[63,63,63,63,63,63,-375,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-374,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'LAMBDA':([25,26,27,54,60,63,89,104,105,110,114,135,156,158,160,165,188,189,190,195,202,211,214,216,218,219,230,231,240,246,257,260,264,270,273,282,288,291,293,296,304,305,311,319,321,332,336,347,353,362,370,376,378,383,385,],[68,68,68,68,68,68,68,-375,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-374,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,367,68,68,367,68,367,68,]),'FROM':([54,],[110,]),'TUMBLING':([120,],[176,]),'SLIDING':([120,],[177,]),'EXACT':([124,],[185,]),'FILTER':([124,],[186,]),'WINDOW':([176,177,],[235,236,]),'BY':([229,232,],[270,273,]),'AT':([342,357,359,360,368,],[-298,-298,372,-297,-298,]),'PREVIOUS':([342,357,359,360,368,371,382,],[-298,-298,-300,-297,-298,381,-299,]),'FOLLOWING':([342,357,359,360,368,371,380,382,389,],[-298,-298,-300,-297,-298,-302,388,-299,-301,]),'WHEN':([342,357,358,359,360,368,369,371,377,380,382,387,389,392,],[-298,-298,370,-300,-297,-298,378,-302,385,-304,-299,-296,-301,-303,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,105,110,114,120,121,129,130,131,135,142,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[1,46,47,48,73,73,73,90,91,92,93,94,95,96,97,98,99,100,101,73,73,73,73,153,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,262,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'factor':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,105,110,114,120,121,129,130,131,135,142,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,162,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'power':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,105,110,114,120,121,129,130,131,135,142,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'atom':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,105,110,114,120,121,129,130,131,135,142,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'fstring':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,105,110,114,120,121,129,130,131,135,142,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'number':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,105,110,114,120,121,129,130,131,135,142,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'string_list':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,105,110,114,120,121,129,130,131,135,142,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'gen_query_expression':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,105,110,114,120,121,129,130,131,135,142,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'list_query_expression':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,105,110,114,120,121,129,130,131,135,142,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'set_query_expression':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,105,110,114,120,121,129,130,131,135,142,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'integer':([0,2,3,5,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,105,110,114,120,121,129,130,131,135,142,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'string':([0,2,3,5,11,25,26,27,34,35,36,37,38,39,40,41,42,43,44,45,54,60,63,66,72,89,102,105,110,114,120,121,129,130,131,135,142,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[24,24,24,24,50,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'trailer_list_opt':([7,],[49,]),'yield_expr':([25,],[52,]),'testseq_query':([25,],[53,]),'test_as_list':([25,],[55,]),'query_expression':([25,26,27,],[56,77,85,]),'test_as':([25,114,],[57,172,]),'select_clause':([25,26,27,],[58,58,58,]),'test':([25,26,27,54,60,89,105,110,114,135,156,158,160,165,195,202,211,214,216,218,219,230,231,240,257,264,273,282,288,291,293,296,304,305,311,321,332,336,347,362,370,378,385,],[59,79,88,111,126,161,168,171,173,196,207,208,210,215,248,255,258,261,266,168,269,271,272,281,292,294,303,306,310,313,215,318,324,325,334,303,346,215,363,373,379,386,391,]),'try_catch_expr':([25,26,27,54,60,89,105,110,114,135,156,158,160,165,188,189,195,202,211,214,216,218,219,230,231,240,257,264,273,282,288,291,293,296,304,305,311,321,332,336,347,362,370,378,385,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,243,244,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'old_test':([25,26,27,54,60,63,89,105,110,114,135,156,158,160,165,188,189,190,195,202,211,214,216,218,219,230,231,240,246,257,264,270,273,282,288,291,293,296,304,305,311,319,321,332,336,347,362,370,378,385,],[62,62,62,62,62,128,62,62,62,62,62,62,62,62,62,62,62,245,62,62,62,62,62,62,62,62,62,62,286,62,62,300,62,62,62,62,62,62,62,62,62,300,62,62,62,62,62,62,62,62,]),'logical':([25,26,27,54,60,63,66,89,105,110,114,129,130,131,135,156,158,160,165,188,189,190,195,202,211,214,216,218,219,230,231,237,240,246,257,264,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[64,64,64,64,64,64,132,64,64,64,64,191,192,193,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,278,64,64,64,64,64,64,64,64,64,64,64,64,64,64,337,64,64,64,64,64,365,64,64,365,64,365,64,]),'lambdef':([25,26,27,54,60,63,89,105,110,114,135,156,158,160,165,188,189,190,195,202,211,214,216,218,219,230,231,240,246,257,264,270,273,282,288,291,293,296,304,305,311,319,321,332,336,347,362,370,378,385,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'is_not_expr':([25,26,27,54,60,63,66,89,105,110,114,129,130,131,135,156,158,160,165,188,189,190,194,195,202,211,214,216,218,219,230,231,237,240,246,257,264,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,247,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'comparison':([25,26,27,54,60,63,66,89,105,110,114,129,130,131,135,142,156,158,160,165,188,189,190,194,195,202,211,214,216,218,219,230,231,237,240,246,257,264,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,205,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'not_in_expr':([25,26,27,54,60,63,66,89,105,110,114,129,130,131,135,142,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,237,240,246,257,264,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,256,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'star_expr':([25,26,27,54,60,63,66,89,105,110,114,120,121,129,130,131,135,142,156,158,160,165,188,189,190,194,195,202,206,211,214,216,218,219,230,231,234,237,238,239,240,246,257,264,265,270,273,282,288,291,293,296,304,305,311,317,319,321,332,336,347,353,362,370,376,378,383,385,],[71,71,71,71,71,71,71,71,71,71,71,180,180,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,180,71,279,180,71,71,71,71,180,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'testlist_query':([26,],[75,]),'test_list_comma_opt':([26,27,54,],[76,84,112,]),'test_list':([26,27,54,],[78,78,78,]),'dictorsetmaker':([27,],[81,]),'test_map_list_comma_opt':([27,],[82,]),'query_map_expression':([27,],[83,]),'test_map_list':([27,],[86,]),'map_select_clause':([27,],[87,]),'trailer':([49,],[103,]),'yield_arg':([54,],[109,]),'comma_opt':([55,78,136,213,],[113,155,197,259,]),'first_clause':([58,87,],[115,159,]),'for_clause':([58,87,174,209,],[116,116,221,221,]),'let_clause':([58,87,174,209,],[117,117,222,222,]),'window_clause':([58,87,174,209,],[118,118,223,223,]),'match_clause':([58,87,174,209,],[119,119,224,224,]),'tumbling_window':([58,87,174,209,],[122,122,122,122,]),'sliding_window':([58,87,174,209,],[123,123,123,123,]),'path_step':([61,],[127,]),'varargs_list':([68,367,],[134,375,]),'vfpdef_list':([68,367,],[136,136,]),'star_vfpdef':([68,198,367,],[137,249,137,]),'power_vfpdef':([68,198,367,],[138,250,138,]),'comp_op':([69,205,],[142,142,]),'arg_list':([104,],[164,]),'argument_list_opt_comma':([104,],[165,]),'subscript_list':([105,],[166,]),'subscript':([105,218,],[167,267,]),'test_opt':([105,218,219,],[169,169,268,]),'rest_clauses_list_opt':([115,159,],[174,209,]),'for_clause_entry_list':([120,],[175,]),'for_clause_entry':([120,234,],[178,275,]),'expr_list':([120,121,234,239,265,],[179,183,179,183,295,]),'let_clause_entry_list':([121,],[181,]),'let_clause_entry':([121,239,],[182,280,]),'exact_or_filter_opt':([124,],[184,]),'vfpdef_rest':([137,249,],[199,287,]),'comma_vfpdef_list':([137,249,],[200,200,]),'argument':([165,293,336,],[213,316,348,]),'query_clause':([174,209,],[220,220,]),'group_by_clause':([174,209,],[225,225,]),'where_clause':([174,209,],[226,226,]),'order_by_clause':([174,209,],[227,227,]),'count_clause':([174,209,],[228,228,]),'pattern_object':([184,309,],[241,333,]),'comma_power_vfpdef':([200,],[252,]),'comp_for':([215,337,364,],[263,351,351,]),'pattern_object_list':([242,],[283,]),'pattern_object_element':([242,308,],[284,328,]),'sliceop':([268,],[297,]),'group_by_var_list':([270,],[298,]),'group_by_var':([270,319,],[299,338,]),'order_list':([273,],[301,]),'order_element':([273,321,],[302,340,]),'argument_list_opt':([293,],[314,]),'argument_list':([293,],[315,]),'as_opt':([307,],[326,]),'window_start_cond':([324,325,],[341,343,]),'comp_iter_opt':([337,364,],[349,374,]),'comp_iter':([337,364,],[350,350,]),'comp_if':([337,364,],[352,352,]),'window_end_cond_opt':([341,],[354,]),'window_end_cond':([341,343,],[355,361,]),'window_vars':([342,357,368,],[358,369,377,]),'current_item_opt':([342,357,368,],[359,359,359,]),'test_nocond':([353,376,383,],[364,384,390,]),'lambdef_nocond':([353,376,383,],[366,366,366,]),'positional_var_opt':([359,],[371,]),'previous_var_opt':([371,],[380,]),'following_var_opt':([380,],[387,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expr","S'",1,None,None,None),
  ('file_input -> stmt_or_newline_list','file_input',1,'p_file_input','PythonQLParser.py',122),
  ('stmt_or_newline_list -> NEWLINE','stmt_or_newline_list',1,'p_stmt_or_newline_list','PythonQLParser.py',126),
  ('stmt_or_newline_list -> stmt','stmt_or_newline_list',1,'p_stmt_or_newline_list','PythonQLParser.py',127),
  ('stmt_or_newline_list -> stmt_or_newline_list NEWLINE','stmt_or_newline_list',2,'p_stmt_or_newline_list','PythonQLParser.py',128),
  ('stmt_or_newline_list -> stmt_or_newline_list stmt','stmt_or_newline_list',2,'p_stmt_or_newline_list','PythonQLParser.py',129),
  ('decorator -> @ dotted_name args_opt NEWLINE','decorator',4,'p_decorator','PythonQLParser.py',133),
  ('dotted_name -> NAME','dotted_name',1,'p_dotted_name','PythonQLParser.py',137),
  ('dotted_name -> dotted_name . NAME','dotted_name',3,'p_dotted_name','PythonQLParser.py',138),
  ('args_opt -> ( arg_list )','args_opt',3,'p_args_opt','PythonQLParser.py',142),
  ('args_opt -> <empty>','args_opt',0,'p_args_opt','PythonQLParser.py',143),
  ('decorator_list -> decorator_list decorator','decorator_list',2,'p_decorator_list','PythonQLParser.py',147),
  ('decorator_list -> decorator','decorator_list',1,'p_decorator_list','PythonQLParser.py',148),
  ('decorated -> decorator_list funcdef','decorated',2,'p_decorated','PythonQLParser.py',152),
  ('decorated -> decorator_list classdef','decorated',2,'p_decorated','PythonQLParser.py',153),
  ('funcdef -> DEF NAME parameters signature_opt : suite','funcdef',6,'p_funcdef','PythonQLParser.py',157),
  ('signature_opt -> ARROW test','signature_opt',2,'p_signature_opt','PythonQLParser.py',161),
  ('signature_opt -> <empty>','signature_opt',0,'p_signature_opt','PythonQLParser.py',162),
  ('parameters -> ( typedargs_list_opt )','parameters',3,'p_parameters','PythonQLParser.py',166),
  ('typedargs_list_opt -> typedargs_list','typedargs_list_opt',1,'p_typedargs_list_opt','PythonQLParser.py',170),
  ('typedargs_list_opt -> <empty>','typedargs_list_opt',0,'p_typedargs_list_opt','PythonQLParser.py',171),
  ('typedargs_list -> normal_args_list','typedargs_list',1,'p_typedargs_list','PythonQLParser.py',175),
  ('typedargs_list -> normal_args_list , star_args_list','typedargs_list',3,'p_typedargs_list','PythonQLParser.py',176),
  ('typedargs_list -> normal_args_list , star_args_list , double_star_arg','typedargs_list',5,'p_typedargs_list','PythonQLParser.py',177),
  ('typedargs_list -> normal_args_list , double_star_arg','typedargs_list',3,'p_typedargs_list','PythonQLParser.py',178),
  ('typedargs_list -> star_args_list , double_star_arg','typedargs_list',3,'p_typedargs_list','PythonQLParser.py',179),
  ('typedargs_list -> double_star_arg','typedargs_list',1,'p_typedargs_list','PythonQLParser.py',180),
  ('normal_args_list -> normal_args_list , normal_arg','normal_args_list',3,'p_normal_args_list','PythonQLParser.py',184),
  ('normal_args_list -> normal_arg','normal_args_list',1,'p_normal_args_list','PythonQLParser.py',185),
  ('normal_arg -> tpdef','normal_arg',1,'p_normal_arg','PythonQLParser.py',189),
  ('normal_arg -> tpdef = test','normal_arg',3,'p_normal_arg','PythonQLParser.py',190),
  ('star_args_list -> star_tpdef','star_args_list',1,'p_star_args_list','PythonQLParser.py',194),
  ('star_args_list -> star_tpdef , normal_args_list','star_args_list',3,'p_star_args_list','PythonQLParser.py',195),
  ('star_args_list -> star_tpdef , double_star_arg','star_args_list',3,'p_star_args_list','PythonQLParser.py',196),
  ('star_args_list -> star_tpdef , normal_args_list , double_star_arg','star_args_list',5,'p_star_args_list','PythonQLParser.py',197),
  ('double_star_arg -> POWER tpdef','double_star_arg',2,'p_double_star_arg','PythonQLParser.py',201),
  ('tpdef -> NAME','tpdef',1,'p_tpdef','PythonQLParser.py',205),
  ('tpdef -> NAME : test','tpdef',3,'p_tpdef','PythonQLParser.py',206),
  ('star_tpdef -> *','star_tpdef',1,'p_star_tpdef','PythonQLParser.py',210),
  ('star_tpdef -> * tpdef','star_tpdef',2,'p_star_tpdef','PythonQLParser.py',211),
  ('stmt -> simple_stmt','stmt',1,'p_stmt','PythonQLParser.py',215),
  ('stmt -> compound_stmt','stmt',1,'p_stmt','PythonQLParser.py',216),
  ('simple_stmt -> small_stmt_list ; NEWLINE','simple_stmt',3,'p_simple_stmt','PythonQLParser.py',220),
  ('simple_stmt -> small_stmt_list NEWLINE','simple_stmt',2,'p_simple_stmt','PythonQLParser.py',221),
  ('small_stmt_list -> small_stmt','small_stmt_list',1,'p_small_stmt_list','PythonQLParser.py',225),
  ('small_stmt_list -> small_stmt_list ; small_stmt','small_stmt_list',3,'p_small_stmt_list','PythonQLParser.py',226),
  ('small_stmt -> expr_stmt','small_stmt',1,'p_small_stmt','PythonQLParser.py',230),
  ('small_stmt -> del_stmt','small_stmt',1,'p_small_stmt','PythonQLParser.py',231),
  ('small_stmt -> pass_stmt','small_stmt',1,'p_small_stmt','PythonQLParser.py',232),
  ('small_stmt -> flow_stmt','small_stmt',1,'p_small_stmt','PythonQLParser.py',233),
  ('small_stmt -> import_stmt','small_stmt',1,'p_small_stmt','PythonQLParser.py',234),
  ('small_stmt -> global_stmt','small_stmt',1,'p_small_stmt','PythonQLParser.py',235),
  ('small_stmt -> non_local_stmt','small_stmt',1,'p_small_stmt','PythonQLParser.py',236),
  ('small_stmt -> assert_stmt','small_stmt',1,'p_small_stmt','PythonQLParser.py',237),
  ('expr_stmt -> testlist_star_expr augassign yield_expr','expr_stmt',3,'p_expr_stmt','PythonQLParser.py',241),
  ('expr_stmt -> testlist_star_expr augassign test_list_comma_opt','expr_stmt',3,'p_expr_stmt','PythonQLParser.py',242),
  ('expr_stmt -> testlist_star_expr annassign','expr_stmt',2,'p_expr_stmt','PythonQLParser.py',243),
  ('expr_stmt -> testlist_star_expr assign_list','expr_stmt',2,'p_expr_stmt','PythonQLParser.py',244),
  ('testlist_star_expr -> test comma_opt','testlist_star_expr',2,'p_testlist_star_expr','PythonQLParser.py',248),
  ('testlist_star_expr -> star_expr comma_opt','testlist_star_expr',2,'p_testlist_star_expr','PythonQLParser.py',249),
  ('testlist_star_expr -> testlist_star_expr , test comma_opt','testlist_star_expr',4,'p_testlist_star_expr','PythonQLParser.py',250),
  ('testlist_star_expr -> testlist_star_expr , star_expr comma_opt','testlist_star_expr',4,'p_testlist_star_expr','PythonQLParser.py',251),
  ('comma_opt -> ,','comma_opt',1,'p_comma_opt','PythonQLParser.py',255),
  ('comma_opt -> <empty>','comma_opt',0,'p_comma_opt','PythonQLParser.py',256),
  ('augassign -> ADD_ASSIGN','augassign',1,'p_augassign','PythonQLParser.py',260),
  ('augassign -> SUB_ASSIGN','augassign',1,'p_augassign','PythonQLParser.py',261),
  ('augassign -> MULT_ASSIGN','augassign',1,'p_augassign','PythonQLParser.py',262),
  ('augassign -> AT_ASSIGN','augassign',1,'p_augassign','PythonQLParser.py',263),
  ('augassign -> AND_ASSIGN','augassign',1,'p_augassign','PythonQLParser.py',264),
  ('augassign -> OR_ASSIGN','augassign',1,'p_augassign','PythonQLParser.py',265),
  ('augassign -> XOR_ASSIGN','augassign',1,'p_augassign','PythonQLParser.py',266),
  ('augassign -> LEFT_SHIFT_ASSIGN','augassign',1,'p_augassign','PythonQLParser.py',267),
  ('augassign -> RIGHT_SHIFT_ASSIGN','augassign',1,'p_augassign','PythonQLParser.py',268),
  ('augassign -> POWER_ASSIGN','augassign',1,'p_augassign','PythonQLParser.py',269),
  ('augassign -> DIV_ASSIGN','augassign',1,'p_augassign','PythonQLParser.py',270),
  ('augassign -> MOD_ASSIGN','augassign',1,'p_augassign','PythonQLParser.py',271),
  ('augassign -> IDIV_ASSIGN','augassign',1,'p_augassign','PythonQLParser.py',272),
  ('annassign -> : test annassign_opt','annassign',3,'p_annassign','PythonQLParser.py',275),
  ('annassign_opt -> = test','annassign_opt',2,'p_annassign_opt','PythonQLParser.py',279),
  ('annassign_opt -> <empty>','annassign_opt',0,'p_annassign_opt','PythonQLParser.py',280),
  ('assign_list -> = yield_expr','assign_list',2,'p_assign_list','PythonQLParser.py',284),
  ('assign_list -> = testlist_star_expr','assign_list',2,'p_assign_list','PythonQLParser.py',285),
  ('assign_list -> assign_list = yield_expr','assign_list',3,'p_assign_list','PythonQLParser.py',286),
  ('assign_list -> assign_list = testlist_star_expr','assign_list',3,'p_assign_list','PythonQLParser.py',287),
  ('assign_list -> <empty>','assign_list',0,'p_assign_list','PythonQLParser.py',288),
  ('del_stmt -> DEL expr_list','del_stmt',2,'p_del_stmt','PythonQLParser.py',292),
  ('pass_stmt -> PASS','pass_stmt',1,'p_pass_stmt','PythonQLParser.py',296),
  ('flow_stmt -> break_stmt','flow_stmt',1,'p_flow_stmt','PythonQLParser.py',300),
  ('flow_stmt -> continue_stmt','flow_stmt',1,'p_flow_stmt','PythonQLParser.py',301),
  ('flow_stmt -> return_stmt','flow_stmt',1,'p_flow_stmt','PythonQLParser.py',302),
  ('flow_stmt -> raise_stmt','flow_stmt',1,'p_flow_stmt','PythonQLParser.py',303),
  ('flow_stmt -> yield_stmt','flow_stmt',1,'p_flow_stmt','PythonQLParser.py',304),
  ('break_stmt -> BREAK','break_stmt',1,'p_break_stmt','PythonQLParser.py',308),
  ('continue_stmt -> CONTINUE','continue_stmt',1,'p_continue_stmt','PythonQLParser.py',312),
  ('return_stmt -> RETURN test_list_comma_opt','return_stmt',2,'p_return_stmt','PythonQLParser.py',316),
  ('return_stmt -> RETURN','return_stmt',1,'p_return_stmt','PythonQLParser.py',317),
  ('yield_stmt -> yield_expr','yield_stmt',1,'p_yield_stmt','PythonQLParser.py',321),
  ('raise_stmt -> RAISE','raise_stmt',1,'p_raise_stmt','PythonQLParser.py',325),
  ('raise_stmt -> RAISE test','raise_stmt',2,'p_raise_stmt','PythonQLParser.py',326),
  ('raise_stmt -> RAISE test FROM test','raise_stmt',4,'p_raise_stmt','PythonQLParser.py',327),
  ('import_stmt -> import_name','import_stmt',1,'p_import_stmt','PythonQLParser.py',331),
  ('import_stmt -> import_from','import_stmt',1,'p_import_stmt','PythonQLParser.py',332),
  ('import_name -> IMPORT dotted_as_names','import_name',2,'p_import_name','PythonQLParser.py',336),
  ('import_from -> FROM dots_list_opt dotted_name dots_list_opt IMPORT *','import_from',6,'p_import_from','PythonQLParser.py',340),
  ('import_from -> FROM dots_list_opt dotted_name dots_list_opt IMPORT ( import_as_names comma_opt )','import_from',9,'p_import_from','PythonQLParser.py',341),
  ('import_from -> FROM dots_list_opt dotted_name dots_list_opt IMPORT import_as_names comma_opt','import_from',7,'p_import_from','PythonQLParser.py',342),
  ('dots_list_opt -> dots_list','dots_list_opt',1,'p_dots_list_opt','PythonQLParser.py',346),
  ('dots_list_opt -> <empty>','dots_list_opt',0,'p_dots_list_opt','PythonQLParser.py',347),
  ('dots_list -> .','dots_list',1,'p_dots_list','PythonQLParser.py',351),
  ('dots_list -> ELLIPSIS','dots_list',1,'p_dots_list','PythonQLParser.py',352),
  ('dots_list -> dots_list .','dots_list',2,'p_dots_list','PythonQLParser.py',353),
  ('dots_list -> dots_list ELLIPSIS','dots_list',2,'p_dots_list','PythonQLParser.py',354),
  ('import_as_name -> NAME','import_as_name',1,'p_import_as_name','PythonQLParser.py',358),
  ('import_as_name -> NAME AS NAME','import_as_name',3,'p_import_as_name','PythonQLParser.py',359),
  ('dotted_as_names -> dotted_as_name','dotted_as_names',1,'p_dotted_as_names','PythonQLParser.py',363),
  ('dotted_as_names -> dotted_as_names , dotted_as_name','dotted_as_names',3,'p_dotted_as_names','PythonQLParser.py',364),
  ('dotted_as_name -> dotted_name','dotted_as_name',1,'p_dotted_as_name','PythonQLParser.py',368),
  ('dotted_as_name -> dotted_name AS NAME','dotted_as_name',3,'p_dotted_as_name','PythonQLParser.py',369),
  ('import_as_names -> import_as_name','import_as_names',1,'p_import_as_names','PythonQLParser.py',373),
  ('import_as_names -> import_as_names , import_as_name','import_as_names',3,'p_import_as_names','PythonQLParser.py',374),
  ('global_stmt -> GLOBAL name_list','global_stmt',2,'p_global_stmt','PythonQLParser.py',378),
  ('name_list -> NAME','name_list',1,'p_name_list','PythonQLParser.py',382),
  ('name_list -> name_list , NAME','name_list',3,'p_name_list','PythonQLParser.py',383),
  ('non_local_stmt -> NONLOCAL name_list','non_local_stmt',2,'p_non_local_stmt','PythonQLParser.py',387),
  ('assert_stmt -> ASSERT test','assert_stmt',2,'p_assert_stmt','PythonQLParser.py',391),
  ('assert_stmt -> ASSERT test , test','assert_stmt',4,'p_assert_stmt','PythonQLParser.py',392),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','PythonQLParser.py',396),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','PythonQLParser.py',397),
  ('compound_stmt -> for_stmt','compound_stmt',1,'p_compound_stmt','PythonQLParser.py',398),
  ('compound_stmt -> try_stmt','compound_stmt',1,'p_compound_stmt','PythonQLParser.py',399),
  ('compound_stmt -> with_stmt','compound_stmt',1,'p_compound_stmt','PythonQLParser.py',400),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','PythonQLParser.py',401),
  ('compound_stmt -> classdef','compound_stmt',1,'p_compound_stmt','PythonQLParser.py',402),
  ('compound_stmt -> decorated','compound_stmt',1,'p_compound_stmt','PythonQLParser.py',403),
  ('if_stmt -> IF test : suite elif_list else_opt','if_stmt',6,'p_if_stmt','PythonQLParser.py',407),
  ('elif_list -> elif_list ELIF test : suite','elif_list',5,'p_elif_list','PythonQLParser.py',411),
  ('elif_list -> <empty>','elif_list',0,'p_elif_list','PythonQLParser.py',412),
  ('else_opt -> ELSE : suite','else_opt',3,'p_else_opt','PythonQLParser.py',416),
  ('else_opt -> <empty>','else_opt',0,'p_else_opt','PythonQLParser.py',417),
  ('while_stmt -> WHILE test : suite else_opt','while_stmt',5,'p_while_stmt','PythonQLParser.py',421),
  ('for_stmt -> FOR expr_list IN test_list_comma_opt : suite else_opt','for_stmt',7,'p_for_stmt','PythonQLParser.py',425),
  ('try_stmt -> TRY : suite except_clauses_list else_opt finally_opt','try_stmt',6,'p_try_stmt','PythonQLParser.py',429),
  ('try_stmt -> TRY : suite finally','try_stmt',4,'p_try_stmt','PythonQLParser.py',430),
  ('except_clauses_list -> except_clauses_list except_clause : suite','except_clauses_list',4,'p_except_clauses_list','PythonQLParser.py',434),
  ('except_clauses_list -> except_clause : suite','except_clauses_list',3,'p_except_clauses_list','PythonQLParser.py',435),
  ('finally_opt -> finally','finally_opt',1,'p_finally_opt','PythonQLParser.py',439),
  ('finally_opt -> <empty>','finally_opt',0,'p_finally_opt','PythonQLParser.py',440),
  ('finally -> FINALLY : suite','finally',3,'p_finally','PythonQLParser.py',444),
  ('with_stmt -> WITH with_item_list : suite','with_stmt',4,'p_with_stmt','PythonQLParser.py',448),
  ('with_item_list -> with_item_list with_item','with_item_list',2,'p_with_item_list','PythonQLParser.py',452),
  ('with_item_list -> <empty>','with_item_list',0,'p_with_item_list','PythonQLParser.py',453),
  ('with_item -> test','with_item',1,'p_with_item','PythonQLParser.py',457),
  ('with_item -> test AS expr','with_item',3,'p_with_item','PythonQLParser.py',458),
  ('except_clause -> EXCEPT test AS NAME','except_clause',4,'p_except_clause','PythonQLParser.py',462),
  ('except_clause -> EXCEPT test','except_clause',2,'p_except_clause','PythonQLParser.py',463),
  ('except_clause -> EXCEPT','except_clause',1,'p_except_clause','PythonQLParser.py',464),
  ('suite -> simple_stmt','suite',1,'p_suite','PythonQLParser.py',468),
  ('suite -> NEWLINE INDENT stmt_list DEDENT','suite',4,'p_suite','PythonQLParser.py',469),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','PythonQLParser.py',473),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list','PythonQLParser.py',474),
  ('test -> try_catch_expr path_step','test',2,'p_test','PythonQLParser.py',478),
  ('path_step -> path_step CHILD_AXIS try_catch_expr','path_step',3,'p_path_step','PythonQLParser.py',482),
  ('path_step -> path_step DESCENDENT_AXIS try_catch_expr','path_step',3,'p_path_step','PythonQLParser.py',483),
  ('path_step -> <empty>','path_step',0,'p_path_step','PythonQLParser.py',484),
  ('try_catch_expr -> old_test','try_catch_expr',1,'p_try_catch_expr','PythonQLParser.py',488),
  ('try_catch_expr -> TRY old_test EXCEPT old_test','try_catch_expr',4,'p_try_catch_expr','PythonQLParser.py',489),
  ('old_test -> logical','old_test',1,'p_old_test','PythonQLParser.py',493),
  ('old_test -> logical IF logical ELSE old_test','old_test',5,'p_old_test','PythonQLParser.py',494),
  ('old_test -> lambdef','old_test',1,'p_old_test','PythonQLParser.py',495),
  ('test_nocond -> logical','test_nocond',1,'p_test_nocond','PythonQLParser.py',499),
  ('test_nocond -> lambdef_nocond','test_nocond',1,'p_test_nocond','PythonQLParser.py',500),
  ('lambdef -> LAMBDA varargs_list : test','lambdef',4,'p_lambdef','PythonQLParser.py',504),
  ('lambdef -> LAMBDA : test','lambdef',3,'p_lambdef','PythonQLParser.py',505),
  ('lambdef_nocond -> LAMBDA varargs_list : test_nocond','lambdef_nocond',4,'p_lambdef_nocond','PythonQLParser.py',509),
  ('lambdef_nocond -> LAMBDA : test_nocond','lambdef_nocond',3,'p_lambdef_nocond','PythonQLParser.py',510),
  ('varargs_list -> vfpdef_list comma_opt','varargs_list',2,'p_varargs_list','PythonQLParser.py',514),
  ('varargs_list -> vfpdef_list , star_vfpdef vfpdef_rest','varargs_list',4,'p_varargs_list','PythonQLParser.py',515),
  ('varargs_list -> vfpdef_list , power_vfpdef','varargs_list',3,'p_varargs_list','PythonQLParser.py',516),
  ('varargs_list -> star_vfpdef vfpdef_rest','varargs_list',2,'p_varargs_list','PythonQLParser.py',517),
  ('varargs_list -> power_vfpdef','varargs_list',1,'p_varargs_list','PythonQLParser.py',518),
  ('vfpdef_list -> NAME','vfpdef_list',1,'p_vfpdef_list','PythonQLParser.py',522),
  ('vfpdef_list -> NAME = test','vfpdef_list',3,'p_vfpdef_list','PythonQLParser.py',523),
  ('vfpdef_list -> vfpdef_list , NAME','vfpdef_list',3,'p_vfpdef_list','PythonQLParser.py',524),
  ('vfpdef_list -> vfpdef_list , NAME = test','vfpdef_list',5,'p_vfpdef_list','PythonQLParser.py',525),
  ('star_vfpdef -> *','star_vfpdef',1,'p_star_vfpdef','PythonQLParser.py',529),
  ('star_vfpdef -> * NAME','star_vfpdef',2,'p_star_vfpdef','PythonQLParser.py',530),
  ('vfpdef_rest -> comma_vfpdef_list comma_power_vfpdef','vfpdef_rest',2,'p_vfpdef_rest','PythonQLParser.py',534),
  ('comma_vfpdef_list -> , NAME','comma_vfpdef_list',2,'p_comma_vfpdef_list','PythonQLParser.py',538),
  ('comma_vfpdef_list -> , NAME = test','comma_vfpdef_list',4,'p_comma_vfpdef_list','PythonQLParser.py',539),
  ('comma_vfpdef_list -> comma_vfpdef_list , NAME','comma_vfpdef_list',3,'p_comma_vfpdef_list','PythonQLParser.py',540),
  ('comma_vfpdef_list -> comma_vfpdef_list , NAME = test','comma_vfpdef_list',5,'p_comma_vfpdef_list','PythonQLParser.py',541),
  ('comma_vfpdef_list -> <empty>','comma_vfpdef_list',0,'p_comma_vfpdef_list','PythonQLParser.py',542),
  ('comma_power_vfpdef -> , POWER NAME','comma_power_vfpdef',3,'p_comma_power_vfpdef','PythonQLParser.py',546),
  ('comma_power_vfpdef -> <empty>','comma_power_vfpdef',0,'p_comma_power_vfpdef','PythonQLParser.py',547),
  ('power_vfpdef -> POWER NAME','power_vfpdef',2,'p_power_vfpdef','PythonQLParser.py',551),
  ('logical -> logical AND logical','logical',3,'p_logical','PythonQLParser.py',555),
  ('logical -> logical OR logical','logical',3,'p_logical','PythonQLParser.py',556),
  ('logical -> NOT logical','logical',2,'p_logical','PythonQLParser.py',557),
  ('logical -> is_not_expr','logical',1,'p_logical','PythonQLParser.py',558),
  ('is_not_expr -> is_not_expr IS NOT is_not_expr','is_not_expr',4,'p_is_not_expr','PythonQLParser.py',562),
  ('is_not_expr -> comparison','is_not_expr',1,'p_is_not_expr','PythonQLParser.py',563),
  ('comparison -> comparison comp_op comparison','comparison',3,'p_comparison','PythonQLParser.py',567),
  ('comparison -> not_in_expr','comparison',1,'p_comparison','PythonQLParser.py',568),
  ('comp_op -> <','comp_op',1,'p_comp_op','PythonQLParser.py',572),
  ('comp_op -> >','comp_op',1,'p_comp_op','PythonQLParser.py',573),
  ('comp_op -> EQUALS','comp_op',1,'p_comp_op','PythonQLParser.py',574),
  ('comp_op -> GT_EQ','comp_op',1,'p_comp_op','PythonQLParser.py',575),
  ('comp_op -> LT_EQ','comp_op',1,'p_comp_op','PythonQLParser.py',576),
  ('comp_op -> NOT_EQ_1','comp_op',1,'p_comp_op','PythonQLParser.py',577),
  ('comp_op -> NOT_EQ_2','comp_op',1,'p_comp_op','PythonQLParser.py',578),
  ('comp_op -> IN','comp_op',1,'p_comp_op','PythonQLParser.py',579),
  ('comp_op -> IS','comp_op',1,'p_comp_op','PythonQLParser.py',580),
  ('not_in_expr -> not_in_expr NOT IN not_in_expr','not_in_expr',4,'p_not_in_expr','PythonQLParser.py',584),
  ('not_in_expr -> star_expr','not_in_expr',1,'p_not_in_expr','PythonQLParser.py',585),
  ('star_expr -> * expr','star_expr',2,'p_star_expr','PythonQLParser.py',589),
  ('star_expr -> expr','star_expr',1,'p_star_expr','PythonQLParser.py',590),
  ('expr -> expr | expr','expr',3,'p_expr','PythonQLParser.py',594),
  ('expr -> expr ^ expr','expr',3,'p_expr','PythonQLParser.py',595),
  ('expr -> expr & expr','expr',3,'p_expr','PythonQLParser.py',596),
  ('expr -> expr LEFT_SHIFT expr','expr',3,'p_expr','PythonQLParser.py',597),
  ('expr -> expr RIGHT_SHIFT expr','expr',3,'p_expr','PythonQLParser.py',598),
  ('expr -> expr + expr','expr',3,'p_expr','PythonQLParser.py',599),
  ('expr -> expr - expr','expr',3,'p_expr','PythonQLParser.py',600),
  ('expr -> expr * expr','expr',3,'p_expr','PythonQLParser.py',601),
  ('expr -> expr / expr','expr',3,'p_expr','PythonQLParser.py',602),
  ('expr -> expr % expr','expr',3,'p_expr','PythonQLParser.py',603),
  ('expr -> expr IDIV expr','expr',3,'p_expr','PythonQLParser.py',604),
  ('expr -> expr @ expr','expr',3,'p_expr','PythonQLParser.py',605),
  ('expr -> factor','expr',1,'p_expr','PythonQLParser.py',606),
  ('factor -> + expr','factor',2,'p_factor','PythonQLParser.py',609),
  ('factor -> - expr','factor',2,'p_factor','PythonQLParser.py',610),
  ('factor -> ~ expr','factor',2,'p_factor','PythonQLParser.py',611),
  ('factor -> power','factor',1,'p_factor','PythonQLParser.py',612),
  ('power -> atom trailer_list_opt','power',2,'p_power','PythonQLParser.py',616),
  ('power -> atom trailer_list_opt POWER factor','power',4,'p_power','PythonQLParser.py',617),
  ('trailer_list_opt -> trailer_list_opt trailer','trailer_list_opt',2,'p_trailer_list_opt','PythonQLParser.py',621),
  ('trailer_list_opt -> <empty>','trailer_list_opt',0,'p_trailer_list_opt','PythonQLParser.py',622),
  ('fstring -> LONG_FSTRING_LITERAL','fstring',1,'p_fstring','PythonQLParser.py',626),
  ('fstring -> FSTRING_LITERAL','fstring',1,'p_fstring','PythonQLParser.py',627),
  ('atom -> fstring','atom',1,'p_atom','PythonQLParser.py',643),
  ('atom -> NAME','atom',1,'p_atom','PythonQLParser.py',644),
  ('atom -> number','atom',1,'p_atom','PythonQLParser.py',645),
  ('atom -> string_list','atom',1,'p_atom','PythonQLParser.py',646),
  ('atom -> ELLIPSIS','atom',1,'p_atom','PythonQLParser.py',647),
  ('atom -> NONE','atom',1,'p_atom','PythonQLParser.py',648),
  ('atom -> TRUE','atom',1,'p_atom','PythonQLParser.py',649),
  ('atom -> FALSE','atom',1,'p_atom','PythonQLParser.py',650),
  ('atom -> gen_query_expression','atom',1,'p_atom','PythonQLParser.py',651),
  ('atom -> list_query_expression','atom',1,'p_atom','PythonQLParser.py',652),
  ('atom -> set_query_expression','atom',1,'p_atom','PythonQLParser.py',653),
  ('string_list -> string_list string','string_list',2,'p_string_list','PythonQLParser.py',657),
  ('string_list -> string','string_list',1,'p_string_list','PythonQLParser.py',658),
  ('gen_query_expression -> ( )','gen_query_expression',2,'p_gen_query_expression','PythonQLParser.py',662),
  ('gen_query_expression -> ( yield_expr )','gen_query_expression',3,'p_gen_query_expression','PythonQLParser.py',663),
  ('gen_query_expression -> ( testseq_query )','gen_query_expression',3,'p_gen_query_expression','PythonQLParser.py',664),
  ('list_query_expression -> [ ]','list_query_expression',2,'p_list_query_expression','PythonQLParser.py',668),
  ('list_query_expression -> [ testlist_query ]','list_query_expression',3,'p_list_query_expression','PythonQLParser.py',669),
  ('set_query_expression -> { }','set_query_expression',2,'p_set_query_expression','PythonQLParser.py',673),
  ('set_query_expression -> { dictorsetmaker }','set_query_expression',3,'p_set_query_expression','PythonQLParser.py',674),
  ('query_expression -> select_clause first_clause rest_clauses_list_opt','query_expression',3,'p_query_expression','PythonQLParser.py',678),
  ('first_clause -> for_clause','first_clause',1,'p_first_clause','PythonQLParser.py',682),
  ('first_clause -> let_clause','first_clause',1,'p_first_clause','PythonQLParser.py',683),
  ('first_clause -> window_clause','first_clause',1,'p_first_clause','PythonQLParser.py',684),
  ('first_clause -> match_clause','first_clause',1,'p_first_clause','PythonQLParser.py',685),
  ('rest_clauses_list_opt -> rest_clauses_list_opt query_clause','rest_clauses_list_opt',2,'p_rest_clauses_list_opt','PythonQLParser.py',689),
  ('rest_clauses_list_opt -> <empty>','rest_clauses_list_opt',0,'p_rest_clauses_list_opt','PythonQLParser.py',690),
  ('query_clause -> for_clause','query_clause',1,'p_query_clause','PythonQLParser.py',694),
  ('query_clause -> let_clause','query_clause',1,'p_query_clause','PythonQLParser.py',695),
  ('query_clause -> window_clause','query_clause',1,'p_query_clause','PythonQLParser.py',696),
  ('query_clause -> match_clause','query_clause',1,'p_query_clause','PythonQLParser.py',697),
  ('query_clause -> group_by_clause','query_clause',1,'p_query_clause','PythonQLParser.py',698),
  ('query_clause -> where_clause','query_clause',1,'p_query_clause','PythonQLParser.py',699),
  ('query_clause -> order_by_clause','query_clause',1,'p_query_clause','PythonQLParser.py',700),
  ('query_clause -> count_clause','query_clause',1,'p_query_clause','PythonQLParser.py',701),
  ('query_map_expression -> map_select_clause first_clause rest_clauses_list_opt','query_map_expression',3,'p_query_map_expression','PythonQLParser.py',705),
  ('select_clause -> SELECT test','select_clause',2,'p_select_clause','PythonQLParser.py',709),
  ('select_clause -> test','select_clause',1,'p_select_clause','PythonQLParser.py',710),
  ('map_select_clause -> SELECT test : test','map_select_clause',4,'p_map_select_clause','PythonQLParser.py',714),
  ('map_select_clause -> test : test','map_select_clause',3,'p_map_select_clause','PythonQLParser.py',715),
  ('for_clause -> FOR for_clause_entry_list','for_clause',2,'p_for_clause','PythonQLParser.py',719),
  ('for_clause_entry_list -> for_clause_entry','for_clause_entry_list',1,'p_for_clause_entry_list','PythonQLParser.py',723),
  ('for_clause_entry_list -> for_clause_entry_list , for_clause_entry','for_clause_entry_list',3,'p_for_clause_entry_list','PythonQLParser.py',724),
  ('for_clause_entry -> expr_list IN logical','for_clause_entry',3,'p_for_clause_entry','PythonQLParser.py',728),
  ('let_clause -> LET let_clause_entry_list','let_clause',2,'p_let_clause','PythonQLParser.py',732),
  ('let_clause_entry_list -> let_clause_entry','let_clause_entry_list',1,'p_let_clause_entry_list','PythonQLParser.py',736),
  ('let_clause_entry_list -> let_clause_entry_list , let_clause_entry','let_clause_entry_list',3,'p_let_clause_entry_list','PythonQLParser.py',737),
  ('let_clause_entry -> expr_list = test','let_clause_entry',3,'p_let_clause_entry','PythonQLParser.py',741),
  ('window_clause -> tumbling_window','window_clause',1,'p_window_clause','PythonQLParser.py',745),
  ('window_clause -> sliding_window','window_clause',1,'p_window_clause','PythonQLParser.py',746),
  ('tumbling_window -> FOR TUMBLING WINDOW NAME IN test window_start_cond window_end_cond_opt','tumbling_window',8,'p_tumbling_window','PythonQLParser.py',750),
  ('sliding_window -> FOR SLIDING WINDOW NAME IN test window_start_cond window_end_cond','sliding_window',8,'p_sliding_window','PythonQLParser.py',754),
  ('window_start_cond -> START window_vars WHEN test','window_start_cond',4,'p_window_start_cond','PythonQLParser.py',758),
  ('window_end_cond_opt -> window_end_cond','window_end_cond_opt',1,'p_window_end_cond_opt','PythonQLParser.py',762),
  ('window_end_cond_opt -> <empty>','window_end_cond_opt',0,'p_window_end_cond_opt','PythonQLParser.py',763),
  ('window_end_cond -> ONLY END window_vars WHEN test','window_end_cond',5,'p_window_end_cond','PythonQLParser.py',767),
  ('window_end_cond -> END window_vars WHEN test','window_end_cond',4,'p_window_end_cond','PythonQLParser.py',768),
  ('window_vars -> current_item_opt positional_var_opt previous_var_opt following_var_opt','window_vars',4,'p_window_vars','PythonQLParser.py',772),
  ('current_item_opt -> NAME','current_item_opt',1,'p_current_item_opt','PythonQLParser.py',776),
  ('current_item_opt -> <empty>','current_item_opt',0,'p_current_item_opt','PythonQLParser.py',777),
  ('positional_var_opt -> AT NAME','positional_var_opt',2,'p_positional_var_opt','PythonQLParser.py',781),
  ('positional_var_opt -> <empty>','positional_var_opt',0,'p_positional_var_opt','PythonQLParser.py',782),
  ('previous_var_opt -> PREVIOUS NAME','previous_var_opt',2,'p_previous_var_opt','PythonQLParser.py',786),
  ('previous_var_opt -> <empty>','previous_var_opt',0,'p_previous_var_opt','PythonQLParser.py',787),
  ('following_var_opt -> FOLLOWING NAME','following_var_opt',2,'p_following_var_opt','PythonQLParser.py',791),
  ('following_var_opt -> <empty>','following_var_opt',0,'p_following_var_opt','PythonQLParser.py',792),
  ('match_clause -> MATCH exact_or_filter_opt pattern_object IN test','match_clause',5,'p_match_clause','PythonQLParser.py',796),
  ('exact_or_filter_opt -> EXACT','exact_or_filter_opt',1,'p_exact_or_filter_opt','PythonQLParser.py',800),
  ('exact_or_filter_opt -> FILTER','exact_or_filter_opt',1,'p_exact_or_filter_opt','PythonQLParser.py',801),
  ('exact_or_filter_opt -> <empty>','exact_or_filter_opt',0,'p_exact_or_filter_opt','PythonQLParser.py',802),
  ('pattern_object -> { pattern_object_list } as_opt','pattern_object',4,'p_pattern_object','PythonQLParser.py',806),
  ('as_opt -> AS NAME','as_opt',2,'p_as_opt','PythonQLParser.py',810),
  ('as_opt -> <empty>','as_opt',0,'p_as_opt','PythonQLParser.py',811),
  ('pattern_object_list -> pattern_object_element','pattern_object_list',1,'p_pattern_object_list','PythonQLParser.py',815),
  ('pattern_object_list -> pattern_object_list , pattern_object_element','pattern_object_list',3,'p_pattern_object_list','PythonQLParser.py',816),
  ('pattern_object_element -> STRING_LITERAL : STRING_LITERAL','pattern_object_element',3,'p_pattern_object_element','PythonQLParser.py',820),
  ('pattern_object_element -> STRING_LITERAL : AS NAME WHERE test','pattern_object_element',6,'p_pattern_object_element','PythonQLParser.py',821),
  ('pattern_object_element -> STRING_LITERAL : AS NAME','pattern_object_element',4,'p_pattern_object_element','PythonQLParser.py',822),
  ('pattern_object_element -> STRING_LITERAL : WHERE test','pattern_object_element',4,'p_pattern_object_element','PythonQLParser.py',823),
  ('pattern_object_element -> STRING_LITERAL : NAME','pattern_object_element',3,'p_pattern_object_element','PythonQLParser.py',824),
  ('pattern_object_element -> STRING_LITERAL : pattern_object','pattern_object_element',3,'p_pattern_object_element','PythonQLParser.py',825),
  ('order_by_clause -> ORDER BY order_list','order_by_clause',3,'p_order_by_clause','PythonQLParser.py',829),
  ('order_list -> order_element','order_list',1,'p_order_list','PythonQLParser.py',833),
  ('order_list -> order_list , order_element','order_list',3,'p_order_list','PythonQLParser.py',834),
  ('order_element -> test','order_element',1,'p_order_element','PythonQLParser.py',838),
  ('order_element -> test ASC','order_element',2,'p_order_element','PythonQLParser.py',839),
  ('order_element -> test DESC','order_element',2,'p_order_element','PythonQLParser.py',840),
  ('group_by_clause -> GROUP BY group_by_var_list','group_by_clause',3,'p_group_by_clause','PythonQLParser.py',844),
  ('group_by_var_list -> group_by_var','group_by_var_list',1,'p_group_by_var_list','PythonQLParser.py',848),
  ('group_by_var_list -> group_by_var_list , group_by_var','group_by_var_list',3,'p_group_by_var_list','PythonQLParser.py',849),
  ('group_by_var -> old_test','group_by_var',1,'p_group_by_var','PythonQLParser.py',853),
  ('group_by_var -> old_test AS NAME','group_by_var',3,'p_group_by_var','PythonQLParser.py',854),
  ('where_clause -> WHERE test','where_clause',2,'p_where_clause','PythonQLParser.py',858),
  ('where_clause -> IF test','where_clause',2,'p_where_clause','PythonQLParser.py',859),
  ('count_clause -> COUNT NAME','count_clause',2,'p_count_clause','PythonQLParser.py',863),
  ('testseq_query -> test_as_list comma_opt','testseq_query',2,'p_testseq_query','PythonQLParser.py',867),
  ('testseq_query -> query_expression','testseq_query',1,'p_testseq_query','PythonQLParser.py',868),
  ('test_as_list -> test_as','test_as_list',1,'p_test_as_list','PythonQLParser.py',872),
  ('test_as_list -> test_as_list , test_as','test_as_list',3,'p_test_as_list','PythonQLParser.py',873),
  ('test_as -> test','test_as',1,'p_test_as','PythonQLParser.py',877),
  ('test_as -> test AS NAME','test_as',3,'p_test_as','PythonQLParser.py',878),
  ('testlist_query -> test_list_comma_opt','testlist_query',1,'p_testlist_query','PythonQLParser.py',882),
  ('testlist_query -> query_expression','testlist_query',1,'p_testlist_query','PythonQLParser.py',883),
  ('trailer -> ( )','trailer',2,'p_trailer','PythonQLParser.py',887),
  ('trailer -> ( arg_list )','trailer',3,'p_trailer','PythonQLParser.py',888),
  ('trailer -> [ subscript_list ]','trailer',3,'p_trailer','PythonQLParser.py',889),
  ('trailer -> . NAME','trailer',2,'p_trailer','PythonQLParser.py',890),
  ('subscript_list -> subscript','subscript_list',1,'p_subscript_list','PythonQLParser.py',894),
  ('subscript_list -> subscript_list , subscript','subscript_list',3,'p_subscript_list','PythonQLParser.py',895),
  ('subscript -> test','subscript',1,'p_subscript','PythonQLParser.py',899),
  ('subscript -> test_opt : test_opt sliceop','subscript',4,'p_subscript','PythonQLParser.py',900),
  ('test_opt -> test','test_opt',1,'p_test_opt','PythonQLParser.py',904),
  ('test_opt -> <empty>','test_opt',0,'p_test_opt','PythonQLParser.py',905),
  ('sliceop -> : test','sliceop',2,'p_sliceop','PythonQLParser.py',909),
  ('sliceop -> :','sliceop',1,'p_sliceop','PythonQLParser.py',910),
  ('sliceop -> <empty>','sliceop',0,'p_sliceop','PythonQLParser.py',911),
  ('expr_list -> star_expr','expr_list',1,'p_expr_list','PythonQLParser.py',915),
  ('expr_list -> expr_list , star_expr','expr_list',3,'p_expr_list','PythonQLParser.py',916),
  ('test_list -> test','test_list',1,'p_test_list','PythonQLParser.py',920),
  ('test_list -> test_list , test','test_list',3,'p_test_list','PythonQLParser.py',921),
  ('test_list_comma_opt -> test_list comma_opt','test_list_comma_opt',2,'p_test_list_comma_opt','PythonQLParser.py',925),
  ('dictorsetmaker -> test_map_list_comma_opt','dictorsetmaker',1,'p_dictorsetmaker','PythonQLParser.py',929),
  ('dictorsetmaker -> query_map_expression','dictorsetmaker',1,'p_dictorsetmaker','PythonQLParser.py',930),
  ('dictorsetmaker -> test_list_comma_opt','dictorsetmaker',1,'p_dictorsetmaker','PythonQLParser.py',931),
  ('dictorsetmaker -> query_expression','dictorsetmaker',1,'p_dictorsetmaker','PythonQLParser.py',932),
  ('test_map_list_comma_opt -> test_map_list','test_map_list_comma_opt',1,'p_test_map_list_comma_opt','PythonQLParser.py',936),
  ('test_map_list -> test : test','test_map_list',3,'p_test_map_list','PythonQLParser.py',940),
  ('test_map_list -> test_map_list , test : test','test_map_list',5,'p_test_map_list','PythonQLParser.py',941),
  ('classdef -> CLASS NAME ( arg_list ) : suite','classdef',7,'p_classdef','PythonQLParser.py',945),
  ('classdef -> CLASS NAME ( ) : suite','classdef',6,'p_classdef','PythonQLParser.py',946),
  ('classdef -> CLASS NAME : suite','classdef',4,'p_classdef','PythonQLParser.py',947),
  ('arg_list -> argument_list_opt_comma argument comma_opt','arg_list',3,'p_arg_list','PythonQLParser.py',951),
  ('arg_list -> argument_list_opt_comma * test , argument_list_opt','arg_list',5,'p_arg_list','PythonQLParser.py',952),
  ('arg_list -> argument_list_opt_comma * test , argument_list_opt , POWER test','arg_list',8,'p_arg_list','PythonQLParser.py',953),
  ('arg_list -> argument_list_opt_comma POWER test','arg_list',3,'p_arg_list','PythonQLParser.py',954),
  ('argument_list_opt_comma -> argument_list_opt_comma argument ,','argument_list_opt_comma',3,'p_argument_list_opt_comma','PythonQLParser.py',959),
  ('argument_list_opt_comma -> <empty>','argument_list_opt_comma',0,'p_argument_list_opt_comma','PythonQLParser.py',960),
  ('argument_list_opt -> argument_list','argument_list_opt',1,'p_argument_list_opt','PythonQLParser.py',964),
  ('argument_list_opt -> <empty>','argument_list_opt',0,'p_argument_list_opt','PythonQLParser.py',965),
  ('argument_list -> argument','argument_list',1,'p_argument_list','PythonQLParser.py',969),
  ('argument_list -> argument_list , argument','argument_list',3,'p_argument_list','PythonQLParser.py',970),
  ('argument -> test','argument',1,'p_argument','PythonQLParser.py',974),
  ('argument -> test comp_for','argument',2,'p_argument','PythonQLParser.py',975),
  ('argument -> test = test','argument',3,'p_argument','PythonQLParser.py',976),
  ('comp_iter -> comp_for','comp_iter',1,'p_comp_iter','PythonQLParser.py',980),
  ('comp_iter -> comp_if','comp_iter',1,'p_comp_iter','PythonQLParser.py',981),
  ('comp_for -> FOR expr_list IN logical comp_iter_opt','comp_for',5,'p_comp_for','PythonQLParser.py',985),
  ('comp_if -> IF test_nocond comp_iter_opt','comp_if',3,'p_comp_if','PythonQLParser.py',989),
  ('comp_iter_opt -> comp_iter','comp_iter_opt',1,'p_comp_iter_opt','PythonQLParser.py',993),
  ('comp_iter_opt -> <empty>','comp_iter_opt',0,'p_comp_iter_opt','PythonQLParser.py',994),
  ('yield_expr -> YIELD yield_arg','yield_expr',2,'p_yield_expr','PythonQLParser.py',998),
  ('yield_expr -> YIELD','yield_expr',1,'p_yield_expr','PythonQLParser.py',999),
  ('yield_arg -> FROM test','yield_arg',2,'p_yield_arg','PythonQLParser.py',1003),
  ('yield_arg -> test_list_comma_opt','yield_arg',1,'p_yield_arg','PythonQLParser.py',1004),
  ('string -> STRING_LITERAL','string',1,'p_string','PythonQLParser.py',1008),
  ('string -> LONG_STRING_LITERAL','string',1,'p_string','PythonQLParser.py',1009),
  ('number -> integer','number',1,'p_number','PythonQLParser.py',1013),
  ('number -> FLOAT_NUMBER','number',1,'p_number','PythonQLParser.py',1014),
  ('number -> IMAG_NUMBER','number',1,'p_number','PythonQLParser.py',1015),
  ('integer -> DECIMAL_INTEGER','integer',1,'p_integer','PythonQLParser.py',1019),
  ('integer -> OCT_INTEGER','integer',1,'p_integer','PythonQLParser.py',1020),
  ('integer -> HEX_INTEGER','integer',1,'p_integer','PythonQLParser.py',1021),
  ('integer -> BIN_INTEGER','integer',1,'p_integer','PythonQLParser.py',1022),
]
